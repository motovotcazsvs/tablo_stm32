
tablo_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007324  08007324  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08007324  08007324  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007324  08007324  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800732c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  20000018  08007344  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08007344  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e333  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002128  00000000  00000000  0002e374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  000304a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000314a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c8a  00000000  00000000  000323c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3d1  00000000  00000000  00034052  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007031a  00000000  00000000  0003f423  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af73d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  000af7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ff4 	.word	0x08006ff4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08006ff4 	.word	0x08006ff4

0800014c <getKey>:
uint8_t change_button = 0;
_Bool Key_Settings,	Key_Nextt, Key_Previous;


void getKey(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(KEY_SET_GPIO_Port, KEY_SET_Pin) == GPIO_PIN_SET) change_button_state |= (1 << 0);
 8000150:	2140      	movs	r1, #64	; 0x40
 8000152:	4852      	ldr	r0, [pc, #328]	; (800029c <getKey+0x150>)
 8000154:	f002 feb6 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8000158:	4603      	mov	r3, r0
 800015a:	2b01      	cmp	r3, #1
 800015c:	d107      	bne.n	800016e <getKey+0x22>
 800015e:	4b50      	ldr	r3, [pc, #320]	; (80002a0 <getKey+0x154>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	b2da      	uxtb	r2, r3
 8000168:	4b4d      	ldr	r3, [pc, #308]	; (80002a0 <getKey+0x154>)
 800016a:	701a      	strb	r2, [r3, #0]
 800016c:	e006      	b.n	800017c <getKey+0x30>
	else change_button_state &= ~(1 << 0); 	
 800016e:	4b4c      	ldr	r3, [pc, #304]	; (80002a0 <getKey+0x154>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	f023 0301 	bic.w	r3, r3, #1
 8000176:	b2da      	uxtb	r2, r3
 8000178:	4b49      	ldr	r3, [pc, #292]	; (80002a0 <getKey+0x154>)
 800017a:	701a      	strb	r2, [r3, #0]
	
	if(HAL_GPIO_ReadPin(KEY_NEXT_GPIO_Port, KEY_NEXT_Pin) == GPIO_PIN_SET) change_button_state |= (1 << 1);
 800017c:	2110      	movs	r1, #16
 800017e:	4847      	ldr	r0, [pc, #284]	; (800029c <getKey+0x150>)
 8000180:	f002 fea0 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	2b01      	cmp	r3, #1
 8000188:	d107      	bne.n	800019a <getKey+0x4e>
 800018a:	4b45      	ldr	r3, [pc, #276]	; (80002a0 <getKey+0x154>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	f043 0302 	orr.w	r3, r3, #2
 8000192:	b2da      	uxtb	r2, r3
 8000194:	4b42      	ldr	r3, [pc, #264]	; (80002a0 <getKey+0x154>)
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e006      	b.n	80001a8 <getKey+0x5c>
	else change_button_state &= ~(1 << 1);
 800019a:	4b41      	ldr	r3, [pc, #260]	; (80002a0 <getKey+0x154>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	f023 0302 	bic.w	r3, r3, #2
 80001a2:	b2da      	uxtb	r2, r3
 80001a4:	4b3e      	ldr	r3, [pc, #248]	; (80002a0 <getKey+0x154>)
 80001a6:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(KEY_PREV_GPIO_Port, KEY_PREV_Pin) == GPIO_PIN_SET) change_button_state |= (1 << 2);
 80001a8:	2120      	movs	r1, #32
 80001aa:	483c      	ldr	r0, [pc, #240]	; (800029c <getKey+0x150>)
 80001ac:	f002 fe8a 	bl	8002ec4 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d107      	bne.n	80001c6 <getKey+0x7a>
 80001b6:	4b3a      	ldr	r3, [pc, #232]	; (80002a0 <getKey+0x154>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	4b37      	ldr	r3, [pc, #220]	; (80002a0 <getKey+0x154>)
 80001c2:	701a      	strb	r2, [r3, #0]
 80001c4:	e006      	b.n	80001d4 <getKey+0x88>
	else change_button_state &= ~(1 << 2);
 80001c6:	4b36      	ldr	r3, [pc, #216]	; (80002a0 <getKey+0x154>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	f023 0304 	bic.w	r3, r3, #4
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b33      	ldr	r3, [pc, #204]	; (80002a0 <getKey+0x154>)
 80001d2:	701a      	strb	r2, [r3, #0]
	
   	change_button = changeButtonsState();
 80001d4:	f000 f870 	bl	80002b8 <changeButtonsState>
 80001d8:	4603      	mov	r3, r0
 80001da:	461a      	mov	r2, r3
 80001dc:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <getKey+0x158>)
 80001de:	701a      	strb	r2, [r3, #0]
    if(change_button && timer_off3 == 1){    	    	
 80001e0:	4b30      	ldr	r3, [pc, #192]	; (80002a4 <getKey+0x158>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d01a      	beq.n	800021e <getKey+0xd2>
 80001e8:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <getKey+0x15c>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d016      	beq.n	800021e <getKey+0xd2>
    	last_state = change_button_state & 0b00000111;
 80001f0:	4b2b      	ldr	r3, [pc, #172]	; (80002a0 <getKey+0x154>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f003 0307 	and.w	r3, r3, #7
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <getKey+0x160>)
 80001fc:	701a      	strb	r2, [r3, #0]
    	change_button_state <<= 3;
 80001fe:	4b28      	ldr	r3, [pc, #160]	; (80002a0 <getKey+0x154>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <getKey+0x154>)
 8000208:	701a      	strb	r2, [r3, #0]
    	
    	fix_ti3 = getCurrentTick();
 800020a:	f000 fd65 	bl	8000cd8 <getCurrentTick>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <getKey+0x164>)
 8000214:	801a      	strh	r2, [r3, #0]
        timer_off3 = 0;
 8000216:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <getKey+0x15c>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
 800021c:	e031      	b.n	8000282 <getKey+0x136>
    }
    else if(controlTickTime(fix_ti3, 20)){
 800021e:	4b24      	ldr	r3, [pc, #144]	; (80002b0 <getKey+0x164>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	2114      	movs	r1, #20
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fd2b 	bl	8000c80 <controlTickTime>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d028      	beq.n	8000282 <getKey+0x136>
    	timer_off3 = 1;
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <getKey+0x15c>)
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
    	current_state = change_button_state & 0b00000111;
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <getKey+0x154>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	f003 0307 	and.w	r3, r3, #7
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b1c      	ldr	r3, [pc, #112]	; (80002b4 <getKey+0x168>)
 8000242:	701a      	strb	r2, [r3, #0]
    	
    	if(current_state == last_state) buttonAssignment();
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <getKey+0x168>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <getKey+0x160>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	429a      	cmp	r2, r3
 800024e:	d102      	bne.n	8000256 <getKey+0x10a>
 8000250:	f000 f84c 	bl	80002ec <buttonAssignment>
 8000254:	e015      	b.n	8000282 <getKey+0x136>
    	else {
    		last_state = change_button_state & 0b00000111;
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <getKey+0x154>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	f003 0307 	and.w	r3, r3, #7
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <getKey+0x160>)
 8000262:	701a      	strb	r2, [r3, #0]
			change_button_state <<= 3;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <getKey+0x154>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <getKey+0x154>)
 800026e:	701a      	strb	r2, [r3, #0]
			
			timer_off3 = 0;
 8000270:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <getKey+0x15c>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			fix_ti3 = getCurrentTick();
 8000276:	f000 fd2f 	bl	8000cd8 <getCurrentTick>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <getKey+0x164>)
 8000280:	801a      	strh	r2, [r3, #0]
    	}
    }    
    if(timer_off3 == 1) change_button_state <<= 3;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <getKey+0x15c>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d005      	beq.n	8000296 <getKey+0x14a>
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <getKey+0x154>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <getKey+0x154>)
 8000294:	701a      	strb	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000039 	.word	0x20000039
 80002a4:	2000003a 	.word	0x2000003a
 80002a8:	20000000 	.word	0x20000000
 80002ac:	200005b2 	.word	0x200005b2
 80002b0:	20000034 	.word	0x20000034
 80002b4:	200005b3 	.word	0x200005b3

080002b8 <changeButtonsState>:

uint8_t changeButtonsState(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
	unsigned char ch_button;
 	
 	ch_button = change_button_state >> 3;	 
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <changeButtonsState+0x30>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	08db      	lsrs	r3, r3, #3
 80002c4:	71fb      	strb	r3, [r7, #7]
 	return (ch_button ^ (change_button_state & 0b00000111));	
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <changeButtonsState+0x30>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	f003 0307 	and.w	r3, r3, #7
 80002d0:	b25a      	sxtb	r2, r3
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	4053      	eors	r3, r2
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
}
 80002dc:	4618      	mov	r0, r3
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000039 	.word	0x20000039

080002ec <buttonAssignment>:

void buttonAssignment(void)
{	
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	Key_Settings = current_state & 0b00000001;	
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <buttonAssignment+0x50>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf14      	ite	ne
 80002fc:	2301      	movne	r3, #1
 80002fe:	2300      	moveq	r3, #0
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <buttonAssignment+0x54>)
 8000304:	701a      	strb	r2, [r3, #0]
	Key_Nextt = current_state & 0b00000010; 	
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <buttonAssignment+0x50>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	2b00      	cmp	r3, #0
 8000310:	bf14      	ite	ne
 8000312:	2301      	movne	r3, #1
 8000314:	2300      	moveq	r3, #0
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <buttonAssignment+0x58>)
 800031a:	701a      	strb	r2, [r3, #0]
	Key_Previous = current_state & 0b00000100;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <buttonAssignment+0x50>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	2b00      	cmp	r3, #0
 8000326:	bf14      	ite	ne
 8000328:	2301      	movne	r3, #1
 800032a:	2300      	moveq	r3, #0
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <buttonAssignment+0x5c>)
 8000330:	701a      	strb	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200005b3 	.word	0x200005b3
 8000340:	200005b6 	.word	0x200005b6
 8000344:	200005b4 	.word	0x200005b4
 8000348:	200005b5 	.word	0x200005b5

0800034c <controlKey>:

void controlKey()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	static _Bool key_next_was_pressed = 0;
	static _Bool key_previous_was_pressed = 0;
	static _Bool key_settings_was_pressed = 0;
	
    getKey();
 8000350:	f7ff fefc 	bl	800014c <getKey>
	
	if(Key_Nextt && !key_next_was_pressed){		
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <controlKey+0x100>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d00c      	beq.n	8000376 <controlKey+0x2a>
 800035c:	4b3c      	ldr	r3, [pc, #240]	; (8000450 <controlKey+0x104>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	f083 0301 	eor.w	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d005      	beq.n	8000376 <controlKey+0x2a>
		key_next_was_pressed = 1;
 800036a:	4b39      	ldr	r3, [pc, #228]	; (8000450 <controlKey+0x104>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
		stateNext();
 8000370:	f000 f8be 	bl	80004f0 <stateNext>
 8000374:	e046      	b.n	8000404 <controlKey+0xb8>
	}
	else if(Key_Previous && !key_previous_was_pressed){		
 8000376:	4b37      	ldr	r3, [pc, #220]	; (8000454 <controlKey+0x108>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d00c      	beq.n	8000398 <controlKey+0x4c>
 800037e:	4b36      	ldr	r3, [pc, #216]	; (8000458 <controlKey+0x10c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	f083 0301 	eor.w	r3, r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <controlKey+0x4c>
		key_previous_was_pressed = 1;
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <controlKey+0x10c>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
		statePrevious();
 8000392:	f000 f93f 	bl	8000614 <statePrevious>
 8000396:	e035      	b.n	8000404 <controlKey+0xb8>
	}
	else if(Key_Settings){
 8000398:	4b30      	ldr	r3, [pc, #192]	; (800045c <controlKey+0x110>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d024      	beq.n	80003ea <controlKey+0x9e>
	    if(timer_off4){
 80003a0:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <controlKey+0x114>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d00c      	beq.n	80003c2 <controlKey+0x76>
            fix_ti4 = getCurrentTick();
 80003a8:	f000 fc96 	bl	8000cd8 <getCurrentTick>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b2c      	ldr	r3, [pc, #176]	; (8000464 <controlKey+0x118>)
 80003b2:	801a      	strh	r2, [r3, #0]
            timer_off4 = 0;
 80003b4:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <controlKey+0x114>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
            key_settings_was_pressed = 1;
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <controlKey+0x11c>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
 80003c0:	e020      	b.n	8000404 <controlKey+0xb8>
        }
        else if(key_settings_was_pressed && controlTickTime(fix_ti4, 1000)){
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <controlKey+0x11c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d01c      	beq.n	8000404 <controlKey+0xb8>
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <controlKey+0x118>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fc54 	bl	8000c80 <controlTickTime>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d012      	beq.n	8000404 <controlKey+0xb8>
        	key_settings_was_pressed = 0;
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <controlKey+0x11c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
            stateOnOffSettings();
 80003e4:	f000 f842 	bl	800046c <stateOnOffSettings>
 80003e8:	e00c      	b.n	8000404 <controlKey+0xb8>
        }
	}
	else  if(!Key_Settings && key_settings_was_pressed){
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <controlKey+0x110>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	f083 0301 	eor.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d005      	beq.n	8000404 <controlKey+0xb8>
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <controlKey+0x11c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <controlKey+0xb8>
        stateNextSetting();
 8000400:	f000 f854 	bl	80004ac <stateNextSetting>
	}

    if(!Key_Nextt) key_next_was_pressed = 0; 
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <controlKey+0x100>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	f083 0301 	eor.w	r3, r3, #1
 800040c:	b2db      	uxtb	r3, r3
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <controlKey+0xcc>
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <controlKey+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
    if(!Key_Previous) key_previous_was_pressed = 0;
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <controlKey+0x108>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	f083 0301 	eor.w	r3, r3, #1
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <controlKey+0xe0>
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <controlKey+0x10c>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
    if(!Key_Settings){
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <controlKey+0x110>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	f083 0301 	eor.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	d005      	beq.n	8000446 <controlKey+0xfa>
        key_settings_was_pressed = 0;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <controlKey+0x11c>)
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]
        timer_off4 = 1;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <controlKey+0x114>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
    }
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200005b4 	.word	0x200005b4
 8000450:	2000003b 	.word	0x2000003b
 8000454:	200005b5 	.word	0x200005b5
 8000458:	2000003c 	.word	0x2000003c
 800045c:	200005b6 	.word	0x200005b6
 8000460:	20000001 	.word	0x20000001
 8000464:	20000036 	.word	0x20000036
 8000468:	2000003d 	.word	0x2000003d

0800046c <stateOnOffSettings>:

void stateOnOffSettings(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    menu_settings = !menu_settings;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <stateOnOffSettings+0x38>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	bf14      	ite	ne
 8000478:	2301      	movne	r3, #1
 800047a:	2300      	moveq	r3, #0
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f083 0301 	eor.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <stateOnOffSettings+0x38>)
 800048c:	701a      	strb	r2, [r3, #0]
    if(menu_settings) set_setting = 1;
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <stateOnOffSettings+0x38>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <stateOnOffSettings+0x30>
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <stateOnOffSettings+0x3c>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000040 	.word	0x20000040
 80004a8:	20000038 	.word	0x20000038

080004ac <stateNextSetting>:

void stateNextSetting(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
    if(!menu_settings) return;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <stateNextSetting+0x3c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f083 0301 	eor.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d110      	bne.n	80004e0 <stateNextSetting+0x34>
    
    set_setting++;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <stateNextSetting+0x40>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <stateNextSetting+0x40>)
 80004c8:	701a      	strb	r2, [r3, #0]
    if(set_setting > 6){
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <stateNextSetting+0x40>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b06      	cmp	r3, #6
 80004d0:	d907      	bls.n	80004e2 <stateNextSetting+0x36>
        set_setting = 0;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <stateNextSetting+0x40>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
        menu_settings = 0;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <stateNextSetting+0x3c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	e000      	b.n	80004e2 <stateNextSetting+0x36>
    if(!menu_settings) return;
 80004e0:	bf00      	nop
    }
}
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	20000040 	.word	0x20000040
 80004ec:	20000038 	.word	0x20000038

080004f0 <stateNext>:

void stateNext(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    if(!menu_settings) return;
 80004f4:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <stateNext+0x104>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d176      	bne.n	80005f0 <stateNext+0x100>
    
    switch(set_setting){
 8000502:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <stateNext+0x108>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	2b05      	cmp	r3, #5
 800050a:	d86e      	bhi.n	80005ea <stateNext+0xfa>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <stateNext+0x24>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	0800052d 	.word	0x0800052d
 8000518:	08000549 	.word	0x08000549
 800051c:	08000565 	.word	0x08000565
 8000520:	08000581 	.word	0x08000581
 8000524:	0800059d 	.word	0x0800059d
 8000528:	080005b9 	.word	0x080005b9
        case 1:
           hour++;
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <stateNext+0x10c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <stateNext+0x10c>)
 8000536:	701a      	strb	r2, [r3, #0]
           if(hour > 23) hour = 0;
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <stateNext+0x10c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b17      	cmp	r3, #23
 800053e:	d949      	bls.n	80005d4 <stateNext+0xe4>
 8000540:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <stateNext+0x10c>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
           break;
 8000546:	e045      	b.n	80005d4 <stateNext+0xe4>
        case 2:
           min++;
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <stateNext+0x110>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <stateNext+0x110>)
 8000552:	701a      	strb	r2, [r3, #0]
           if(min > 59) min = 0;
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <stateNext+0x110>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b3b      	cmp	r3, #59	; 0x3b
 800055a:	d93d      	bls.n	80005d8 <stateNext+0xe8>
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <stateNext+0x110>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
           break;
 8000562:	e039      	b.n	80005d8 <stateNext+0xe8>
        case 3:
            day++;
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <stateNext+0x114>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <stateNext+0x114>)
 800056e:	701a      	strb	r2, [r3, #0]
            if(day > 7) day = 1;
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <stateNext+0x114>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b07      	cmp	r3, #7
 8000576:	d931      	bls.n	80005dc <stateNext+0xec>
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <stateNext+0x114>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
            break;
 800057e:	e02d      	b.n	80005dc <stateNext+0xec>
        case 4:
            date++;
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <stateNext+0x118>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <stateNext+0x118>)
 800058a:	701a      	strb	r2, [r3, #0]
            if(date > 31) date = 1;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <stateNext+0x118>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b1f      	cmp	r3, #31
 8000592:	d925      	bls.n	80005e0 <stateNext+0xf0>
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <stateNext+0x118>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
            break;
 800059a:	e021      	b.n	80005e0 <stateNext+0xf0>
        case 5:
            mounth++;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <stateNext+0x11c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <stateNext+0x11c>)
 80005a6:	701a      	strb	r2, [r3, #0]
            if(mounth > 12) mounth = 1;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <stateNext+0x11c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b0c      	cmp	r3, #12
 80005ae:	d919      	bls.n	80005e4 <stateNext+0xf4>
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <stateNext+0x11c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
            break;
 80005b6:	e015      	b.n	80005e4 <stateNext+0xf4>
        case 6:
            year++;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <stateNext+0x120>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <stateNext+0x120>)
 80005c2:	701a      	strb	r2, [r3, #0]
            if(year > 99) year = 0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <stateNext+0x120>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b63      	cmp	r3, #99	; 0x63
 80005ca:	d90d      	bls.n	80005e8 <stateNext+0xf8>
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <stateNext+0x120>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
            break;
 80005d2:	e009      	b.n	80005e8 <stateNext+0xf8>
           break;
 80005d4:	bf00      	nop
 80005d6:	e008      	b.n	80005ea <stateNext+0xfa>
           break;
 80005d8:	bf00      	nop
 80005da:	e006      	b.n	80005ea <stateNext+0xfa>
            break;
 80005dc:	bf00      	nop
 80005de:	e004      	b.n	80005ea <stateNext+0xfa>
            break;
 80005e0:	bf00      	nop
 80005e2:	e002      	b.n	80005ea <stateNext+0xfa>
            break;
 80005e4:	bf00      	nop
 80005e6:	e000      	b.n	80005ea <stateNext+0xfa>
            break;
 80005e8:	bf00      	nop
    }
    setTime();
 80005ea:	f001 fb29 	bl	8001c40 <setTime>
 80005ee:	e000      	b.n	80005f2 <stateNext+0x102>
    if(!menu_settings) return;
 80005f0:	bf00      	nop
}
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000040 	.word	0x20000040
 80005f8:	20000038 	.word	0x20000038
 80005fc:	200005a9 	.word	0x200005a9
 8000600:	200005a8 	.word	0x200005a8
 8000604:	200005aa 	.word	0x200005aa
 8000608:	200005ab 	.word	0x200005ab
 800060c:	200005ac 	.word	0x200005ac
 8000610:	200005ad 	.word	0x200005ad

08000614 <statePrevious>:

void statePrevious(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    if(!menu_settings) return;
 8000618:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <statePrevious+0xfc>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	f083 0301 	eor.w	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d171      	bne.n	800070a <statePrevious+0xf6>
    
     switch(set_setting){
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <statePrevious+0x100>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3b01      	subs	r3, #1
 800062c:	2b05      	cmp	r3, #5
 800062e:	d869      	bhi.n	8000704 <statePrevious+0xf0>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <statePrevious+0x24>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000651 	.word	0x08000651
 800063c:	0800066f 	.word	0x0800066f
 8000640:	0800068d 	.word	0x0800068d
 8000644:	080006ab 	.word	0x080006ab
 8000648:	080006c9 	.word	0x080006c9
 800064c:	080006e7 	.word	0x080006e7
        case 1:
           if(hour == 0) hour = 23;
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <statePrevious+0x104>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d103      	bne.n	8000660 <statePrevious+0x4c>
 8000658:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <statePrevious+0x104>)
 800065a:	2217      	movs	r2, #23
 800065c:	701a      	strb	r2, [r3, #0]
           else hour--;
           break;
 800065e:	e051      	b.n	8000704 <statePrevious+0xf0>
           else hour--;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <statePrevious+0x104>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3b01      	subs	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <statePrevious+0x104>)
 800066a:	701a      	strb	r2, [r3, #0]
           break;
 800066c:	e04a      	b.n	8000704 <statePrevious+0xf0>
        case 2:
           if(min == 0) min = 59;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <statePrevious+0x108>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d103      	bne.n	800067e <statePrevious+0x6a>
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <statePrevious+0x108>)
 8000678:	223b      	movs	r2, #59	; 0x3b
 800067a:	701a      	strb	r2, [r3, #0]
           else min--;
           break;
 800067c:	e042      	b.n	8000704 <statePrevious+0xf0>
           else min--;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <statePrevious+0x108>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3b01      	subs	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <statePrevious+0x108>)
 8000688:	701a      	strb	r2, [r3, #0]
           break;
 800068a:	e03b      	b.n	8000704 <statePrevious+0xf0>
        case 3:
            if(day == 1) day = 7;
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <statePrevious+0x10c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d103      	bne.n	800069c <statePrevious+0x88>
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <statePrevious+0x10c>)
 8000696:	2207      	movs	r2, #7
 8000698:	701a      	strb	r2, [r3, #0]
            else day--;
            break;
 800069a:	e033      	b.n	8000704 <statePrevious+0xf0>
            else day--;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <statePrevious+0x10c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <statePrevious+0x10c>)
 80006a6:	701a      	strb	r2, [r3, #0]
            break;
 80006a8:	e02c      	b.n	8000704 <statePrevious+0xf0>
        case 4:
            if(date == 1) date = 31;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <statePrevious+0x110>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d103      	bne.n	80006ba <statePrevious+0xa6>
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <statePrevious+0x110>)
 80006b4:	221f      	movs	r2, #31
 80006b6:	701a      	strb	r2, [r3, #0]
            else date--;
            break;
 80006b8:	e024      	b.n	8000704 <statePrevious+0xf0>
            else date--;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <statePrevious+0x110>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <statePrevious+0x110>)
 80006c4:	701a      	strb	r2, [r3, #0]
            break;
 80006c6:	e01d      	b.n	8000704 <statePrevious+0xf0>
        case 5:
            if(mounth == 1) mounth = 12;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <statePrevious+0x114>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d103      	bne.n	80006d8 <statePrevious+0xc4>
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <statePrevious+0x114>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	701a      	strb	r2, [r3, #0]
            else mounth--;
            break;
 80006d6:	e015      	b.n	8000704 <statePrevious+0xf0>
            else mounth--;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <statePrevious+0x114>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <statePrevious+0x114>)
 80006e2:	701a      	strb	r2, [r3, #0]
            break;
 80006e4:	e00e      	b.n	8000704 <statePrevious+0xf0>
        case 6:
            if(year == 0) year = 99;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <statePrevious+0x118>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d103      	bne.n	80006f6 <statePrevious+0xe2>
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <statePrevious+0x118>)
 80006f0:	2263      	movs	r2, #99	; 0x63
 80006f2:	701a      	strb	r2, [r3, #0]
            else year--;
            break;
 80006f4:	e005      	b.n	8000702 <statePrevious+0xee>
            else year--;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <statePrevious+0x118>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <statePrevious+0x118>)
 8000700:	701a      	strb	r2, [r3, #0]
            break;
 8000702:	bf00      	nop
    }
     setTime();
 8000704:	f001 fa9c 	bl	8001c40 <setTime>
 8000708:	e000      	b.n	800070c <statePrevious+0xf8>
    if(!menu_settings) return;
 800070a:	bf00      	nop
}
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000040 	.word	0x20000040
 8000714:	20000038 	.word	0x20000038
 8000718:	200005a9 	.word	0x200005a9
 800071c:	200005a8 	.word	0x200005a8
 8000720:	200005aa 	.word	0x200005aa
 8000724:	200005ab 	.word	0x200005ab
 8000728:	200005ac 	.word	0x200005ac
 800072c:	200005ad 	.word	0x200005ad

08000730 <getStateNextSetting>:

uint8_t getStateNextSetting(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
    return set_setting;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <getStateNextSetting+0x10>)
 8000736:	781b      	ldrb	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	20000038 	.word	0x20000038

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f002 f86f 	bl	800282c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f851 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 f9e5 	bl	8000b20 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000756:	f000 f8c1 	bl	80008dc <MX_SPI2_Init>
  MX_TIM1_Init();
 800075a:	f000 f8f5 	bl	8000948 <MX_TIM1_Init>
  MX_TIM2_Init();
 800075e:	f000 f993 	bl	8000a88 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000762:	f000 f88d 	bl	8000880 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8000766:	481e      	ldr	r0, [pc, #120]	; (80007e0 <main+0x9c>)
 8000768:	f005 fd8c 	bl	8006284 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800076c:	2100      	movs	r1, #0
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <main+0xa0>)
 8000770:	f005 fde0 	bl	8006334 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 1;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0xa4>)
 8000776:	2201      	movs	r2, #1
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  initTablo();
 800077a:	f000 fc45 	bl	8001008 <initTablo>
  getRTC();
 800077e:	f001 fae1 	bl	8001d44 <getRTC>
  mounth = 5;
  year = 20;
  setTime();
  */

  uint8_t day_changed = day;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <main+0xa8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  _Bool reset_screen = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */


  while (1)
  {
    functionGetRTC();
 800078c:	f000 fc0a 	bl	8000fa4 <functionGetRTC>
    controlKey();
 8000790:	f7ff fddc 	bl	800034c <controlKey>
    automaticTimeTranslation();//до 10:00 включить часы и не выключать до 12:00
 8000794:	f001 fd1a 	bl	80021cc <automaticTimeTranslation>
    if(menu_settings){
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <main+0xac>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <main+0x72>
      if(!reset_screen) reset_screen = 1;
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <main+0x6c>
 80007ac:	2301      	movs	r3, #1
 80007ae:	71bb      	strb	r3, [r7, #6]
      
      outputSettingsScreen();
 80007b0:	f000 fb08 	bl	8000dc4 <outputSettingsScreen>
 80007b4:	e7ea      	b.n	800078c <main+0x48>
    }
    else{
      if(day_changed != day) { day_changed = day; reset_screen = 1; }
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <main+0xa8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d004      	beq.n	80007ca <main+0x86>
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <main+0xa8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	2301      	movs	r3, #1
 80007c8:	71bb      	strb	r3, [r7, #6]
      if(reset_screen) { resetTicker(); reset_screen = 0; }
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <main+0x94>
 80007d0:	f001 f8d0 	bl	8001974 <resetTicker>
 80007d4:	2300      	movs	r3, #0
 80007d6:	71bb      	strb	r3, [r7, #6]
      
      outputMainScreen();
 80007d8:	f000 fa88 	bl	8000cec <outputMainScreen>
    functionGetRTC();
 80007dc:	e7d6      	b.n	800078c <main+0x48>
 80007de:	bf00      	nop
 80007e0:	200006a4 	.word	0x200006a4
 80007e4:	20000664 	.word	0x20000664
 80007e8:	40012c00 	.word	0x40012c00
 80007ec:	200005aa 	.word	0x200005aa
 80007f0:	20000040 	.word	0x20000040

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b090      	sub	sp, #64	; 0x40
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	2228      	movs	r2, #40	; 0x28
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fbed 	bl	8006fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000832:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fed1 	bl	80055e4 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000848:	f000 fbd8 	bl	8000ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f005 f93c 	bl	8005ae4 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000872:	f000 fbc3 	bl	8000ffc <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	; 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C2_Init+0x50>)
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MX_I2C2_Init+0x54>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C2_Init+0x50>)
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_I2C2_Init+0x58>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2C2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2C2_Init+0x50>)
 800089e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_I2C2_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2C2_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2C2_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_I2C2_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_I2C2_Init+0x50>)
 80008be:	f002 fb49 	bl	8002f54 <HAL_I2C_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008c8:	f000 fb98 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000610 	.word	0x20000610
 80008d4:	40005800 	.word	0x40005800
 80008d8:	000186a0 	.word	0x000186a0

080008dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI2_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_SPI2_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI2_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI2_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI2_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI2_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI2_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI2_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI2_Init+0x64>)
 800092e:	f005 fa61 	bl	8005df4 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 fb60 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200005b8 	.word	0x200005b8
 8000944:	40003800 	.word	0x40003800

08000948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b096      	sub	sp, #88	; 0x58
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f006 fb2e 	bl	8006fe2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000988:	4a3e      	ldr	r2, [pc, #248]	; (8000a84 <MX_TIM1_Init+0x13c>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <MX_TIM1_Init+0x138>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000998:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <MX_TIM1_Init+0x138>)
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a4:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b0:	4833      	ldr	r0, [pc, #204]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009b2:	f005 fc3c 	bl	800622e <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009bc:	f000 fb1e 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ca:	4619      	mov	r1, r3
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009ce:	f005 feb1 	bl	8006734 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009d8:	f000 fb10 	bl	8000ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009dc:	4828      	ldr	r0, [pc, #160]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009de:	f005 fc74 	bl	80062ca <HAL_TIM_PWM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009e8:	f000 fb08 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f8:	4619      	mov	r1, r3
 80009fa:	4821      	ldr	r0, [pc, #132]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009fc:	f006 fa1a 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a06:	f000 faf9 	bl	8000ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	; 0x60
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000a30:	f005 fdba 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a3a:	f000 fadf 	bl	8000ffc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000a62:	f006 fa2b 	bl	8006ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a6c:	f000 fac6 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000a72:	f001 fe05 	bl	8002680 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3758      	adds	r7, #88	; 0x58
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000664 	.word	0x20000664
 8000a84:	40012c00 	.word	0x40012c00

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aae:	2247      	movs	r2, #71	; 0x47
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ace:	f005 fbae 	bl	800622e <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ad8:	f000 fa90 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aea:	f005 fe23 	bl	8006734 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af4:	f000 fa82 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000af8:	2320      	movs	r3, #32
 8000afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000b06:	f006 f995 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 fa74 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200006a4 	.word	0x200006a4

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a39      	ldr	r2, [pc, #228]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b52:	f043 0320 	orr.w	r3, r3, #32
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0320 	and.w	r3, r3, #32
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a33      	ldr	r2, [pc, #204]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9a:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b9c:	f002 f9a9 	bl	8002ef2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, String0_Pin|String1_Pin|String2_Pin|String3_Pin 
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 8000ba6:	4826      	ldr	r0, [pc, #152]	; (8000c40 <MX_GPIO_Init+0x120>)
 8000ba8:	f002 f9a3 	bl	8002ef2 <HAL_GPIO_WritePin>
                          |String4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, String5_Pin|String6_Pin|String7_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2158      	movs	r1, #88	; 0x58
 8000bb0:	4824      	ldr	r0, [pc, #144]	; (8000c44 <MX_GPIO_Init+0x124>)
 8000bb2:	f002 f99e 	bl	8002ef2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Strobe_GPIO_Port, Strobe_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	4822      	ldr	r0, [pc, #136]	; (8000c44 <MX_GPIO_Init+0x124>)
 8000bbc:	f002 f999 	bl	8002ef2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4818      	ldr	r0, [pc, #96]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000bda:	f002 f819 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_NEXT_Pin KEY_PREV_Pin KEY_SET_Pin */
  GPIO_InitStruct.Pin = KEY_NEXT_Pin|KEY_PREV_Pin|KEY_SET_Pin;
 8000bde:	2370      	movs	r3, #112	; 0x70
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_GPIO_Init+0x120>)
 8000bf2:	f002 f80d 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : String0_Pin String1_Pin String2_Pin String3_Pin 
                           String4_Pin */
  GPIO_InitStruct.Pin = String0_Pin|String1_Pin|String2_Pin|String3_Pin 
 8000bf6:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8000bfa:	613b      	str	r3, [r7, #16]
                          |String4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_GPIO_Init+0x120>)
 8000c10:	f001 fffe 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : String5_Pin String6_Pin String7_Pin Strobe_Pin */
  GPIO_InitStruct.Pin = String5_Pin|String6_Pin|String7_Pin|Strobe_Pin;
 8000c14:	23d8      	movs	r3, #216	; 0xd8
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x124>)
 8000c2c:	f001 fff0 	bl	8002c10 <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  showTablo();
 8000c50:	f000 f9fa 	bl	8001048 <showTablo>
    
  if(current_tick < 65535) current_tick++;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d006      	beq.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x26>
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c6a:	801a      	strh	r2, [r3, #0]
  else current_tick = 0;
}
 8000c6c:	e002      	b.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x2c>
  else current_tick = 0;
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000003e 	.word	0x2000003e

08000c80 <controlTickTime>:

_Bool controlTickTime(uint16_t fixed_tick, uint16_t value_tick)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	80fb      	strh	r3, [r7, #6]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	80bb      	strh	r3, [r7, #4]
  _Bool stop_tick;
  uint16_t temp_tick;
    
  if(current_tick < fixed_tick){
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <controlTickTime+0x54>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d908      	bls.n	8000cac <controlTickTime+0x2c>
    temp_tick = 65535 - fixed_tick;
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	81bb      	strh	r3, [r7, #12]
    value_tick = value_tick - temp_tick;
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	89bb      	ldrh	r3, [r7, #12]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	80bb      	strh	r3, [r7, #4]
    fixed_tick = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	80fb      	strh	r3, [r7, #6]
  }
    
  if((current_tick - fixed_tick) >= value_tick) stop_tick = 1;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <controlTickTime+0x54>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	db02      	blt.n	8000cc2 <controlTickTime+0x42>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <controlTickTime+0x46>
  else stop_tick = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
    
  return stop_tick;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000003e 	.word	0x2000003e

08000cd8 <getCurrentTick>:

uint16_t getCurrentTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return current_tick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <getCurrentTick+0x10>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	2000003e 	.word	0x2000003e

08000cec <outputMainScreen>:

void outputMainScreen(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  showString(0, getTimeH());
 8000cf2:	f001 f8cf 	bl	8001e94 <getTimeH>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 fa52 	bl	80011a4 <showString>
  twoPoints();
 8000d00:	f000 f90a 	bl	8000f18 <twoPoints>
  showString(9, getTimeMi());
 8000d04:	f001 f8b2 	bl	8001e6c <getTimeMi>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2009      	movs	r0, #9
 8000d0e:	f000 fa49 	bl	80011a4 <showString>

  setTicker(16, getTimeDayW());
 8000d12:	f001 f8e7 	bl	8001ee4 <getTimeDayW>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2010      	movs	r0, #16
 8000d1c:	f000 fcc0 	bl	80016a0 <setTicker>
  uint8_t n = getSizeStringDay() * numbers_line_matrix;
 8000d20:	f001 fa40 	bl	80021a4 <getSizeStringDay>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	0052      	lsls	r2, r2, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	71fb      	strb	r3, [r7, #7]
  temperatureDs3231();
 8000d2e:	f000 ff09 	bl	8001b44 <temperatureDs3231>
  setTicker(16 + 3 + n, temperatureDs);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	3313      	adds	r3, #19
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	491f      	ldr	r1, [pc, #124]	; (8000db8 <outputMainScreen+0xcc>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fcb0 	bl	80016a0 <setTicker>
  showTicker(1, 16 + 3 + n + 15 + 15);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3331      	adds	r3, #49	; 0x31
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 fcc1 	bl	80016d0 <showTicker>
	
  setTicker(17, getTimeDM());
 8000d4e:	f001 f925 	bl	8001f9c <getTimeDM>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4619      	mov	r1, r3
 8000d56:	2011      	movs	r0, #17
 8000d58:	f000 fca2 	bl	80016a0 <setTicker>
  setTicker(23, ".");
 8000d5c:	4917      	ldr	r1, [pc, #92]	; (8000dbc <outputMainScreen+0xd0>)
 8000d5e:	2017      	movs	r0, #23
 8000d60:	f000 fc9e 	bl	80016a0 <setTicker>
  setTicker(26, getTimeMo());
 8000d64:	f001 f92e 	bl	8001fc4 <getTimeMo>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	201a      	movs	r0, #26
 8000d6e:	f000 fc97 	bl	80016a0 <setTicker>
  setTicker(32, ".");
 8000d72:	4912      	ldr	r1, [pc, #72]	; (8000dbc <outputMainScreen+0xd0>)
 8000d74:	2020      	movs	r0, #32
 8000d76:	f000 fc93 	bl	80016a0 <setTicker>
  getTimeY();
 8000d7a:	f001 f9d9 	bl	8002130 <getTimeY>
  setTicker(35, yearDs);
 8000d7e:	4910      	ldr	r1, [pc, #64]	; (8000dc0 <outputMainScreen+0xd4>)
 8000d80:	2023      	movs	r0, #35	; 0x23
 8000d82:	f000 fc8d 	bl	80016a0 <setTicker>
  setTicker(50, getTimeMounth());
 8000d86:	f001 f931 	bl	8001fec <getTimeMounth>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2032      	movs	r0, #50	; 0x32
 8000d90:	f000 fc86 	bl	80016a0 <setTicker>
  uint8_t n2 = getSizeStringMounth() * numbers_line_matrix;
 8000d94:	f001 fa10 	bl	80021b8 <getSizeStringMounth>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	71bb      	strb	r3, [r7, #6]
  showTicker(2, 50 + n2 - 3 + 12);
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	333b      	adds	r3, #59	; 0x3b
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fc90 	bl	80016d0 <showTicker>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200006f0 	.word	0x200006f0
 8000dbc:	0800700c 	.word	0x0800700c
 8000dc0:	200006e8 	.word	0x200006e8

08000dc4 <outputSettingsScreen>:

void outputSettingsScreen(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  showString(0, getTimeH());
 8000dc8:	f001 f864 	bl	8001e94 <getTimeH>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f9e7 	bl	80011a4 <showString>
  showString(9, getTimeMi());
 8000dd6:	f001 f849 	bl	8001e6c <getTimeMi>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2009      	movs	r0, #9
 8000de0:	f000 f9e0 	bl	80011a4 <showString>
  showString(1, getTimeDW());
 8000de4:	f001 f86a 	bl	8001ebc <getTimeDW>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 f9d9 	bl	80011a4 <showString>
  showString(10, getTimeDM());
 8000df2:	f001 f8d3 	bl	8001f9c <getTimeDM>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f000 f9d2 	bl	80011a4 <showString>
  showString(2, getTimeMo());
 8000e00:	f001 f8e0 	bl	8001fc4 <getTimeMo>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4619      	mov	r1, r3
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 f9cb 	bl	80011a4 <showString>
  showString(11, getTimeYe());
 8000e0e:	f001 f97b 	bl	8002108 <getTimeYe>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4619      	mov	r1, r3
 8000e16:	200b      	movs	r0, #11
 8000e18:	f000 f9c4 	bl	80011a4 <showString>
	
  if(getStateNextSetting() == 1){
 8000e1c:	f7ff fc88 	bl	8000730 <getStateNextSetting>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10c      	bne.n	8000e40 <outputSettingsScreen+0x7c>
    showString(6, "<");
 8000e26:	4937      	ldr	r1, [pc, #220]	; (8000f04 <outputSettingsScreen+0x140>)
 8000e28:	2006      	movs	r0, #6
 8000e2a:	f000 f9bb 	bl	80011a4 <showString>
	showString(7, " ");
 8000e2e:	4936      	ldr	r1, [pc, #216]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e30:	2007      	movs	r0, #7
 8000e32:	f000 f9b7 	bl	80011a4 <showString>
	showString(8, " ");
 8000e36:	4934      	ldr	r1, [pc, #208]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e38:	2008      	movs	r0, #8
 8000e3a:	f000 f9b3 	bl	80011a4 <showString>
 8000e3e:	e058      	b.n	8000ef2 <outputSettingsScreen+0x12e>
  }
  else if(getStateNextSetting() == 2){
 8000e40:	f7ff fc76 	bl	8000730 <getStateNextSetting>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d10c      	bne.n	8000e64 <outputSettingsScreen+0xa0>
	showString(6, ">");
 8000e4a:	4930      	ldr	r1, [pc, #192]	; (8000f0c <outputSettingsScreen+0x148>)
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f000 f9a9 	bl	80011a4 <showString>
	showString(7, " ");
 8000e52:	492d      	ldr	r1, [pc, #180]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e54:	2007      	movs	r0, #7
 8000e56:	f000 f9a5 	bl	80011a4 <showString>
	showString(8, " ");
 8000e5a:	492b      	ldr	r1, [pc, #172]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e5c:	2008      	movs	r0, #8
 8000e5e:	f000 f9a1 	bl	80011a4 <showString>
 8000e62:	e046      	b.n	8000ef2 <outputSettingsScreen+0x12e>
  }
  else if(getStateNextSetting() == 3){
 8000e64:	f7ff fc64 	bl	8000730 <getStateNextSetting>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d10c      	bne.n	8000e88 <outputSettingsScreen+0xc4>
	showString(6, " ");
 8000e6e:	4926      	ldr	r1, [pc, #152]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e70:	2006      	movs	r0, #6
 8000e72:	f000 f997 	bl	80011a4 <showString>
	showString(7, "<");
 8000e76:	4923      	ldr	r1, [pc, #140]	; (8000f04 <outputSettingsScreen+0x140>)
 8000e78:	2007      	movs	r0, #7
 8000e7a:	f000 f993 	bl	80011a4 <showString>
	showString(8, " ");
 8000e7e:	4922      	ldr	r1, [pc, #136]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e80:	2008      	movs	r0, #8
 8000e82:	f000 f98f 	bl	80011a4 <showString>
 8000e86:	e034      	b.n	8000ef2 <outputSettingsScreen+0x12e>
  }
  else if(getStateNextSetting() == 4){
 8000e88:	f7ff fc52 	bl	8000730 <getStateNextSetting>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d10c      	bne.n	8000eac <outputSettingsScreen+0xe8>
	showString(6, " ");
 8000e92:	491d      	ldr	r1, [pc, #116]	; (8000f08 <outputSettingsScreen+0x144>)
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 f985 	bl	80011a4 <showString>
	showString(7, ">");
 8000e9a:	491c      	ldr	r1, [pc, #112]	; (8000f0c <outputSettingsScreen+0x148>)
 8000e9c:	2007      	movs	r0, #7
 8000e9e:	f000 f981 	bl	80011a4 <showString>
	showString(8, " ");
 8000ea2:	4919      	ldr	r1, [pc, #100]	; (8000f08 <outputSettingsScreen+0x144>)
 8000ea4:	2008      	movs	r0, #8
 8000ea6:	f000 f97d 	bl	80011a4 <showString>
 8000eaa:	e022      	b.n	8000ef2 <outputSettingsScreen+0x12e>
  }
  else if(getStateNextSetting() == 5){
 8000eac:	f7ff fc40 	bl	8000730 <getStateNextSetting>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d10c      	bne.n	8000ed0 <outputSettingsScreen+0x10c>
	showString(6, " ");
 8000eb6:	4914      	ldr	r1, [pc, #80]	; (8000f08 <outputSettingsScreen+0x144>)
 8000eb8:	2006      	movs	r0, #6
 8000eba:	f000 f973 	bl	80011a4 <showString>
	showString(7, " ");
 8000ebe:	4912      	ldr	r1, [pc, #72]	; (8000f08 <outputSettingsScreen+0x144>)
 8000ec0:	2007      	movs	r0, #7
 8000ec2:	f000 f96f 	bl	80011a4 <showString>
	showString(8, "<");
 8000ec6:	490f      	ldr	r1, [pc, #60]	; (8000f04 <outputSettingsScreen+0x140>)
 8000ec8:	2008      	movs	r0, #8
 8000eca:	f000 f96b 	bl	80011a4 <showString>
 8000ece:	e010      	b.n	8000ef2 <outputSettingsScreen+0x12e>
  }
  else if(getStateNextSetting() == 6){
 8000ed0:	f7ff fc2e 	bl	8000730 <getStateNextSetting>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d10b      	bne.n	8000ef2 <outputSettingsScreen+0x12e>
	showString(6, " ");
 8000eda:	490b      	ldr	r1, [pc, #44]	; (8000f08 <outputSettingsScreen+0x144>)
 8000edc:	2006      	movs	r0, #6
 8000ede:	f000 f961 	bl	80011a4 <showString>
	showString(7, " ");
 8000ee2:	4909      	ldr	r1, [pc, #36]	; (8000f08 <outputSettingsScreen+0x144>)
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f000 f95d 	bl	80011a4 <showString>
	showString(8, ">");
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <outputSettingsScreen+0x148>)
 8000eec:	2008      	movs	r0, #8
 8000eee:	f000 f959 	bl	80011a4 <showString>
  }

  two_points = 1;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <outputSettingsScreen+0x14c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
  timer_off2 = 1;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <outputSettingsScreen+0x150>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08007010 	.word	0x08007010
 8000f08:	08007014 	.word	0x08007014
 8000f0c:	08007018 	.word	0x08007018
 8000f10:	20000003 	.word	0x20000003
 8000f14:	20000004 	.word	0x20000004

08000f18 <twoPoints>:

void twoPoints(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  if(timer_off2){
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <twoPoints+0x74>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d007      	beq.n	8000f34 <twoPoints+0x1c>
    fix_ti2 = current_tick;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <twoPoints+0x78>)
 8000f26:	881a      	ldrh	r2, [r3, #0]
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <twoPoints+0x7c>)
 8000f2a:	801a      	strh	r2, [r3, #0]
    timer_off2 = 0;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <twoPoints+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e01b      	b.n	8000f6c <twoPoints+0x54>
  }
  else if(controlTickTime(fix_ti2, 500)){
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <twoPoints+0x7c>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe9f 	bl	8000c80 <controlTickTime>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d011      	beq.n	8000f6c <twoPoints+0x54>
    timer_off2 = 1;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <twoPoints+0x74>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
    two_points = !two_points;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <twoPoints+0x80>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <twoPoints+0x80>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  }
      
  if(two_points) showString(6, ":");
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <twoPoints+0x80>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <twoPoints+0x66>
 8000f74:	4909      	ldr	r1, [pc, #36]	; (8000f9c <twoPoints+0x84>)
 8000f76:	2006      	movs	r0, #6
 8000f78:	f000 f914 	bl	80011a4 <showString>
  else showString(6, " ");
}
 8000f7c:	e003      	b.n	8000f86 <twoPoints+0x6e>
  else showString(6, " ");
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <twoPoints+0x88>)
 8000f80:	2006      	movs	r0, #6
 8000f82:	f000 f90f 	bl	80011a4 <showString>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	2000003e 	.word	0x2000003e
 8000f94:	20000044 	.word	0x20000044
 8000f98:	20000003 	.word	0x20000003
 8000f9c:	0800701c 	.word	0x0800701c
 8000fa0:	08007014 	.word	0x08007014

08000fa4 <functionGetRTC>:

void functionGetRTC(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  if(timer_off1){
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <functionGetRTC+0x48>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <functionGetRTC+0x1c>
    fix_ti1 = current_tick;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <functionGetRTC+0x4c>)
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <functionGetRTC+0x50>)
 8000fb6:	801a      	strh	r2, [r3, #0]
    timer_off1 = 0;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <functionGetRTC+0x48>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
    timer_off1 = 1;
    getRTC();
        
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  }
}
 8000fbe:	e013      	b.n	8000fe8 <functionGetRTC+0x44>
  else if(controlTickTime(fix_ti1, 1000)){
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <functionGetRTC+0x50>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe59 	bl	8000c80 <controlTickTime>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d009      	beq.n	8000fe8 <functionGetRTC+0x44>
    timer_off1 = 1;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <functionGetRTC+0x48>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
    getRTC();
 8000fda:	f000 feb3 	bl	8001d44 <getRTC>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <functionGetRTC+0x54>)
 8000fe4:	f001 ff9d 	bl	8002f22 <HAL_GPIO_TogglePin>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000002 	.word	0x20000002
 8000ff0:	2000003e 	.word	0x2000003e
 8000ff4:	20000042 	.word	0x20000042
 8000ff8:	40011000 	.word	0x40011000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <initTablo>:
	{0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00},//49-<
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}//50-пробел												 //50-пробел
};

void initTablo(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	cs_set();
 800100c:	2200      	movs	r2, #0
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <initTablo+0x34>)
 8001012:	f001 ff6e 	bl	8002ef2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffer, matrix_in_tablo, 5000);
 8001016:	f241 3388 	movw	r3, #5000	; 0x1388
 800101a:	220f      	movs	r2, #15
 800101c:	4908      	ldr	r1, [pc, #32]	; (8001040 <initTablo+0x38>)
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <initTablo+0x3c>)
 8001020:	f004 ff49 	bl	8005eb6 <HAL_SPI_Transmit>
	cs_Strobe();
 8001024:	2201      	movs	r2, #1
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <initTablo+0x34>)
 800102a:	f001 ff62 	bl	8002ef2 <HAL_GPIO_WritePin>
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	4802      	ldr	r0, [pc, #8]	; (800103c <initTablo+0x34>)
 8001034:	f001 ff5d 	bl	8002ef2 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010c00 	.word	0x40010c00
 8001040:	2000004c 	.word	0x2000004c
 8001044:	200005b8 	.word	0x200005b8

08001048 <showTablo>:

void showTablo(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, String0_Pin | String1_Pin|String2_Pin|String3_Pin | String4_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 8001054:	484c      	ldr	r0, [pc, #304]	; (8001188 <showTablo+0x140>)
 8001056:	f001 ff4c 	bl	8002ef2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, String5_Pin|String6_Pin|String7_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2158      	movs	r1, #88	; 0x58
 800105e:	484b      	ldr	r0, [pc, #300]	; (800118c <showTablo+0x144>)
 8001060:	f001 ff47 	bl	8002ef2 <HAL_GPIO_WritePin>

	for(uint8_t tpic = 0; tpic < matrix_in_tablo; tpic++) aTxBuffer[matrix_in_tablo - 1 - tpic] = BufferTablo[stroka][tpic];
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e012      	b.n	8001090 <showTablo+0x48>
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <showTablo+0x148>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461c      	mov	r4, r3
 8001070:	79f9      	ldrb	r1, [r7, #7]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f1c3 020e 	rsb	r2, r3, #14
 8001078:	4846      	ldr	r0, [pc, #280]	; (8001194 <showTablo+0x14c>)
 800107a:	4623      	mov	r3, r4
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	1b1b      	subs	r3, r3, r4
 8001080:	4403      	add	r3, r0
 8001082:	440b      	add	r3, r1
 8001084:	7819      	ldrb	r1, [r3, #0]
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <showTablo+0x150>)
 8001088:	5499      	strb	r1, [r3, r2]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	3301      	adds	r3, #1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b0e      	cmp	r3, #14
 8001094:	d9e9      	bls.n	800106a <showTablo+0x22>
	
	HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffer, matrix_in_tablo, 5000);
 8001096:	f241 3388 	movw	r3, #5000	; 0x1388
 800109a:	220f      	movs	r2, #15
 800109c:	493e      	ldr	r1, [pc, #248]	; (8001198 <showTablo+0x150>)
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <showTablo+0x154>)
 80010a0:	f004 ff09 	bl	8005eb6 <HAL_SPI_Transmit>
	cs_Strobe();
 80010a4:	2201      	movs	r2, #1
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4838      	ldr	r0, [pc, #224]	; (800118c <showTablo+0x144>)
 80010aa:	f001 ff22 	bl	8002ef2 <HAL_GPIO_WritePin>
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4836      	ldr	r0, [pc, #216]	; (800118c <showTablo+0x144>)
 80010b4:	f001 ff1d 	bl	8002ef2 <HAL_GPIO_WritePin>

	switch(stroka){
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <showTablo+0x148>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	d848      	bhi.n	8001152 <showTablo+0x10a>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <showTablo+0x80>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010e9 	.word	0x080010e9
 80010cc:	080010f7 	.word	0x080010f7
 80010d0:	08001105 	.word	0x08001105
 80010d4:	08001113 	.word	0x08001113
 80010d8:	08001121 	.word	0x08001121
 80010dc:	0800112f 	.word	0x0800112f
 80010e0:	0800113b 	.word	0x0800113b
 80010e4:	08001147 	.word	0x08001147
		case 0:
			HAL_GPIO_WritePin(String0_GPIO_Port, String0_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	4826      	ldr	r0, [pc, #152]	; (8001188 <showTablo+0x140>)
 80010f0:	f001 feff 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 80010f4:	e02d      	b.n	8001152 <showTablo+0x10a>
		case 1:
		  	HAL_GPIO_WritePin(String1_GPIO_Port, String1_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <showTablo+0x140>)
 80010fe:	f001 fef8 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 8001102:	e026      	b.n	8001152 <showTablo+0x10a>
		case 2:
		  	HAL_GPIO_WritePin(String2_GPIO_Port, String2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110a:	481f      	ldr	r0, [pc, #124]	; (8001188 <showTablo+0x140>)
 800110c:	f001 fef1 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 8001110:	e01f      	b.n	8001152 <showTablo+0x10a>
		case 3:
			HAL_GPIO_WritePin(String3_GPIO_Port, String3_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001118:	481b      	ldr	r0, [pc, #108]	; (8001188 <showTablo+0x140>)
 800111a:	f001 feea 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 800111e:	e018      	b.n	8001152 <showTablo+0x10a>
		case 4:
			HAL_GPIO_WritePin(String4_GPIO_Port, String4_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001126:	4818      	ldr	r0, [pc, #96]	; (8001188 <showTablo+0x140>)
 8001128:	f001 fee3 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 800112c:	e011      	b.n	8001152 <showTablo+0x10a>
		case 5:
		  	HAL_GPIO_WritePin(String5_GPIO_Port, String5_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2108      	movs	r1, #8
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <showTablo+0x144>)
 8001134:	f001 fedd 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 8001138:	e00b      	b.n	8001152 <showTablo+0x10a>
		case 6:
		  	HAL_GPIO_WritePin(String6_GPIO_Port, String6_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2110      	movs	r1, #16
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <showTablo+0x144>)
 8001140:	f001 fed7 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 8001144:	e005      	b.n	8001152 <showTablo+0x10a>
		case 7:
		  	HAL_GPIO_WritePin(String7_GPIO_Port, String7_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <showTablo+0x144>)
 800114c:	f001 fed1 	bl	8002ef2 <HAL_GPIO_WritePin>
		  	break;
 8001150:	bf00      	nop
	}

	stroka++;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <showTablo+0x148>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <showTablo+0x148>)
 800115c:	701a      	strb	r2, [r3, #0]
	if(stroka > 7){
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <showTablo+0x148>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d90b      	bls.n	800117e <showTablo+0x136>
    stroka = 0;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <showTablo+0x148>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	  if(show_seven_lines < speed_ticker_line) show_seven_lines++;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <showTablo+0x158>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b09      	cmp	r3, #9
 8001172:	dc04      	bgt.n	800117e <showTablo+0x136>
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <showTablo+0x158>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <showTablo+0x158>)
 800117c:	6013      	str	r3, [r2, #0]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	40010800 	.word	0x40010800
 800118c:	40010c00 	.word	0x40010c00
 8001190:	20000046 	.word	0x20000046
 8001194:	2000005c 	.word	0x2000005c
 8001198:	2000004c 	.word	0x2000004c
 800119c:	200005b8 	.word	0x200005b8
 80011a0:	200005a0 	.word	0x200005a0

080011a4 <showString>:
	else temp &= ~(1 << numb_bit);
	BufferTablo[str][num_tpic] = temp;
}

void showString(uint8_t num_tpic, char* st)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
	uint8_t kod_simv, let_num;

	for(uint8_t s = 0; st[s] != 0; s++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	73bb      	strb	r3, [r7, #14]
 80011b4:	e22d      	b.n	8001612 <showString+0x46e>
		kod_simv = (uint8_t)st[s];
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	72fb      	strb	r3, [r7, #11]
		if(kod_simv < 208){
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	2bcf      	cmp	r3, #207	; 0xcf
 80011c4:	f200 8222 	bhi.w	800160c <showString+0x468>
			switch (kod_simv){
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	3b20      	subs	r3, #32
 80011cc:	2b9f      	cmp	r3, #159	; 0x9f
 80011ce:	f200 81dc 	bhi.w	800158a <showString+0x3e6>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <showString+0x34>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	08001573 	.word	0x08001573
 80011dc:	0800158b 	.word	0x0800158b
 80011e0:	0800158b 	.word	0x0800158b
 80011e4:	0800158b 	.word	0x0800158b
 80011e8:	0800158b 	.word	0x0800158b
 80011ec:	0800158b 	.word	0x0800158b
 80011f0:	0800158b 	.word	0x0800158b
 80011f4:	0800158b 	.word	0x0800158b
 80011f8:	0800158b 	.word	0x0800158b
 80011fc:	0800158b 	.word	0x0800158b
 8001200:	0800158b 	.word	0x0800158b
 8001204:	08001567 	.word	0x08001567
 8001208:	0800155b 	.word	0x0800155b
 800120c:	0800156d 	.word	0x0800156d
 8001210:	08001561 	.word	0x08001561
 8001214:	0800158b 	.word	0x0800158b
 8001218:	08001513 	.word	0x08001513
 800121c:	08001519 	.word	0x08001519
 8001220:	0800151f 	.word	0x0800151f
 8001224:	08001525 	.word	0x08001525
 8001228:	0800152b 	.word	0x0800152b
 800122c:	08001531 	.word	0x08001531
 8001230:	08001537 	.word	0x08001537
 8001234:	0800153d 	.word	0x0800153d
 8001238:	08001543 	.word	0x08001543
 800123c:	08001549 	.word	0x08001549
 8001240:	0800154f 	.word	0x0800154f
 8001244:	08001555 	.word	0x08001555
 8001248:	0800157f 	.word	0x0800157f
 800124c:	0800158b 	.word	0x0800158b
 8001250:	08001585 	.word	0x08001585
 8001254:	0800158b 	.word	0x0800158b
 8001258:	08001579 	.word	0x08001579
 800125c:	0800158b 	.word	0x0800158b
 8001260:	0800158b 	.word	0x0800158b
 8001264:	0800158b 	.word	0x0800158b
 8001268:	0800158b 	.word	0x0800158b
 800126c:	0800158b 	.word	0x0800158b
 8001270:	0800158b 	.word	0x0800158b
 8001274:	0800158b 	.word	0x0800158b
 8001278:	0800158b 	.word	0x0800158b
 800127c:	0800158b 	.word	0x0800158b
 8001280:	0800158b 	.word	0x0800158b
 8001284:	0800158b 	.word	0x0800158b
 8001288:	0800158b 	.word	0x0800158b
 800128c:	0800158b 	.word	0x0800158b
 8001290:	0800158b 	.word	0x0800158b
 8001294:	0800158b 	.word	0x0800158b
 8001298:	0800158b 	.word	0x0800158b
 800129c:	0800158b 	.word	0x0800158b
 80012a0:	0800158b 	.word	0x0800158b
 80012a4:	0800158b 	.word	0x0800158b
 80012a8:	0800158b 	.word	0x0800158b
 80012ac:	0800158b 	.word	0x0800158b
 80012b0:	0800158b 	.word	0x0800158b
 80012b4:	0800158b 	.word	0x0800158b
 80012b8:	0800158b 	.word	0x0800158b
 80012bc:	0800158b 	.word	0x0800158b
 80012c0:	0800158b 	.word	0x0800158b
 80012c4:	0800158b 	.word	0x0800158b
 80012c8:	0800158b 	.word	0x0800158b
 80012cc:	0800158b 	.word	0x0800158b
 80012d0:	0800158b 	.word	0x0800158b
 80012d4:	0800158b 	.word	0x0800158b
 80012d8:	0800158b 	.word	0x0800158b
 80012dc:	0800158b 	.word	0x0800158b
 80012e0:	0800158b 	.word	0x0800158b
 80012e4:	0800158b 	.word	0x0800158b
 80012e8:	0800158b 	.word	0x0800158b
 80012ec:	0800158b 	.word	0x0800158b
 80012f0:	0800158b 	.word	0x0800158b
 80012f4:	0800158b 	.word	0x0800158b
 80012f8:	0800158b 	.word	0x0800158b
 80012fc:	0800158b 	.word	0x0800158b
 8001300:	0800158b 	.word	0x0800158b
 8001304:	0800158b 	.word	0x0800158b
 8001308:	0800158b 	.word	0x0800158b
 800130c:	0800158b 	.word	0x0800158b
 8001310:	0800158b 	.word	0x0800158b
 8001314:	0800158b 	.word	0x0800158b
 8001318:	0800158b 	.word	0x0800158b
 800131c:	0800158b 	.word	0x0800158b
 8001320:	0800158b 	.word	0x0800158b
 8001324:	0800158b 	.word	0x0800158b
 8001328:	0800158b 	.word	0x0800158b
 800132c:	0800158b 	.word	0x0800158b
 8001330:	0800158b 	.word	0x0800158b
 8001334:	0800158b 	.word	0x0800158b
 8001338:	0800158b 	.word	0x0800158b
 800133c:	0800158b 	.word	0x0800158b
 8001340:	0800158b 	.word	0x0800158b
 8001344:	0800158b 	.word	0x0800158b
 8001348:	0800158b 	.word	0x0800158b
 800134c:	0800158b 	.word	0x0800158b
 8001350:	0800158b 	.word	0x0800158b
 8001354:	0800158b 	.word	0x0800158b
 8001358:	080014b9 	.word	0x080014b9
 800135c:	080014bf 	.word	0x080014bf
 8001360:	080014c5 	.word	0x080014c5
 8001364:	080014cb 	.word	0x080014cb
 8001368:	080014d1 	.word	0x080014d1
 800136c:	080014d7 	.word	0x080014d7
 8001370:	080014dd 	.word	0x080014dd
 8001374:	080014e3 	.word	0x080014e3
 8001378:	080014e9 	.word	0x080014e9
 800137c:	080014ef 	.word	0x080014ef
 8001380:	0800158b 	.word	0x0800158b
 8001384:	080014f5 	.word	0x080014f5
 8001388:	080014fb 	.word	0x080014fb
 800138c:	08001501 	.word	0x08001501
 8001390:	08001507 	.word	0x08001507
 8001394:	0800150d 	.word	0x0800150d
 8001398:	08001459 	.word	0x08001459
 800139c:	0800145f 	.word	0x0800145f
 80013a0:	08001465 	.word	0x08001465
 80013a4:	0800146b 	.word	0x0800146b
 80013a8:	08001471 	.word	0x08001471
 80013ac:	08001477 	.word	0x08001477
 80013b0:	0800147d 	.word	0x0800147d
 80013b4:	08001483 	.word	0x08001483
 80013b8:	08001489 	.word	0x08001489
 80013bc:	0800148f 	.word	0x0800148f
 80013c0:	08001495 	.word	0x08001495
 80013c4:	0800149b 	.word	0x0800149b
 80013c8:	080014a1 	.word	0x080014a1
 80013cc:	080014a7 	.word	0x080014a7
 80013d0:	080014ad 	.word	0x080014ad
 80013d4:	080014b3 	.word	0x080014b3
 80013d8:	080014b9 	.word	0x080014b9
 80013dc:	080014bf 	.word	0x080014bf
 80013e0:	080014c5 	.word	0x080014c5
 80013e4:	080014cb 	.word	0x080014cb
 80013e8:	080014d1 	.word	0x080014d1
 80013ec:	080014d7 	.word	0x080014d7
 80013f0:	080014dd 	.word	0x080014dd
 80013f4:	080014e3 	.word	0x080014e3
 80013f8:	080014e9 	.word	0x080014e9
 80013fc:	080014ef 	.word	0x080014ef
 8001400:	0800158b 	.word	0x0800158b
 8001404:	080014f5 	.word	0x080014f5
 8001408:	080014fb 	.word	0x080014fb
 800140c:	08001501 	.word	0x08001501
 8001410:	08001507 	.word	0x08001507
 8001414:	0800150d 	.word	0x0800150d
 8001418:	08001459 	.word	0x08001459
 800141c:	0800145f 	.word	0x0800145f
 8001420:	08001465 	.word	0x08001465
 8001424:	0800146b 	.word	0x0800146b
 8001428:	08001471 	.word	0x08001471
 800142c:	08001477 	.word	0x08001477
 8001430:	0800147d 	.word	0x0800147d
 8001434:	08001483 	.word	0x08001483
 8001438:	08001489 	.word	0x08001489
 800143c:	0800148f 	.word	0x0800148f
 8001440:	08001495 	.word	0x08001495
 8001444:	0800149b 	.word	0x0800149b
 8001448:	080014a1 	.word	0x080014a1
 800144c:	080014a7 	.word	0x080014a7
 8001450:	080014ad 	.word	0x080014ad
 8001454:	080014b3 	.word	0x080014b3
				case 144: case 176:
					let_num = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
					break;
 800145c:	e095      	b.n	800158a <showString+0x3e6>
				case 145: case 177:
					let_num = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
					break;
 8001462:	e092      	b.n	800158a <showString+0x3e6>
				case 146: case 178:
					let_num = 2;
 8001464:	2302      	movs	r3, #2
 8001466:	73fb      	strb	r3, [r7, #15]
					break;
 8001468:	e08f      	b.n	800158a <showString+0x3e6>
				case 147: case 179:
					let_num = 3;
 800146a:	2303      	movs	r3, #3
 800146c:	73fb      	strb	r3, [r7, #15]
					break;
 800146e:	e08c      	b.n	800158a <showString+0x3e6>
				case 148: case 180:
					let_num = 4;
 8001470:	2304      	movs	r3, #4
 8001472:	73fb      	strb	r3, [r7, #15]
					break;
 8001474:	e089      	b.n	800158a <showString+0x3e6>
				case 149: case 181:
					let_num = 5;
 8001476:	2305      	movs	r3, #5
 8001478:	73fb      	strb	r3, [r7, #15]
					break;
 800147a:	e086      	b.n	800158a <showString+0x3e6>
				case 150: case 182:
					let_num = 6;
 800147c:	2306      	movs	r3, #6
 800147e:	73fb      	strb	r3, [r7, #15]
					break;
 8001480:	e083      	b.n	800158a <showString+0x3e6>
				case 151: case 183:
					let_num = 7;
 8001482:	2307      	movs	r3, #7
 8001484:	73fb      	strb	r3, [r7, #15]
					break;
 8001486:	e080      	b.n	800158a <showString+0x3e6>
				case 152: case 184:
					let_num = 8;
 8001488:	2308      	movs	r3, #8
 800148a:	73fb      	strb	r3, [r7, #15]
					break;
 800148c:	e07d      	b.n	800158a <showString+0x3e6>
				case 153: case 185:
					let_num = 9;
 800148e:	2309      	movs	r3, #9
 8001490:	73fb      	strb	r3, [r7, #15]
					break;
 8001492:	e07a      	b.n	800158a <showString+0x3e6>
				case 154: case 186:
					let_num = 10;
 8001494:	230a      	movs	r3, #10
 8001496:	73fb      	strb	r3, [r7, #15]
					break;
 8001498:	e077      	b.n	800158a <showString+0x3e6>
				case 155: case 187:
					let_num = 11;
 800149a:	230b      	movs	r3, #11
 800149c:	73fb      	strb	r3, [r7, #15]
					break;
 800149e:	e074      	b.n	800158a <showString+0x3e6>
				case 156: case 188:
					let_num = 12;
 80014a0:	230c      	movs	r3, #12
 80014a2:	73fb      	strb	r3, [r7, #15]
					break;
 80014a4:	e071      	b.n	800158a <showString+0x3e6>
				case 157: case 189:
					let_num = 13;
 80014a6:	230d      	movs	r3, #13
 80014a8:	73fb      	strb	r3, [r7, #15]
					break;
 80014aa:	e06e      	b.n	800158a <showString+0x3e6>
				case 158: case 190:
					let_num = 14;
 80014ac:	230e      	movs	r3, #14
 80014ae:	73fb      	strb	r3, [r7, #15]
					break;
 80014b0:	e06b      	b.n	800158a <showString+0x3e6>
				case 159: case 191:
					let_num = 15;
 80014b2:	230f      	movs	r3, #15
 80014b4:	73fb      	strb	r3, [r7, #15]
					break;
 80014b6:	e068      	b.n	800158a <showString+0x3e6>
				case 160: case 128:
					let_num = 16;
 80014b8:	2310      	movs	r3, #16
 80014ba:	73fb      	strb	r3, [r7, #15]
					break;
 80014bc:	e065      	b.n	800158a <showString+0x3e6>
				case 161: case 129:
					let_num = 17;
 80014be:	2311      	movs	r3, #17
 80014c0:	73fb      	strb	r3, [r7, #15]
					break;
 80014c2:	e062      	b.n	800158a <showString+0x3e6>
				case 162: case 130:
					let_num = 18;
 80014c4:	2312      	movs	r3, #18
 80014c6:	73fb      	strb	r3, [r7, #15]
					break;
 80014c8:	e05f      	b.n	800158a <showString+0x3e6>
				case 163: case 131:
					let_num = 19;
 80014ca:	2313      	movs	r3, #19
 80014cc:	73fb      	strb	r3, [r7, #15]
					break;
 80014ce:	e05c      	b.n	800158a <showString+0x3e6>
				case 164: case 132:
					let_num = 20;
 80014d0:	2314      	movs	r3, #20
 80014d2:	73fb      	strb	r3, [r7, #15]
					break;
 80014d4:	e059      	b.n	800158a <showString+0x3e6>
				case 165: case 133:
					let_num = 21;
 80014d6:	2315      	movs	r3, #21
 80014d8:	73fb      	strb	r3, [r7, #15]
					break;
 80014da:	e056      	b.n	800158a <showString+0x3e6>
				case 166: case 134:
					let_num = 22;
 80014dc:	2316      	movs	r3, #22
 80014de:	73fb      	strb	r3, [r7, #15]
					break;
 80014e0:	e053      	b.n	800158a <showString+0x3e6>
				case 167: case 135:
					let_num = 23;
 80014e2:	2317      	movs	r3, #23
 80014e4:	73fb      	strb	r3, [r7, #15]
					break;
 80014e6:	e050      	b.n	800158a <showString+0x3e6>
				case 168: case 136:
					let_num = 24;
 80014e8:	2318      	movs	r3, #24
 80014ea:	73fb      	strb	r3, [r7, #15]
					break;
 80014ec:	e04d      	b.n	800158a <showString+0x3e6>
				case 169: case 137:
					let_num = 25;
 80014ee:	2319      	movs	r3, #25
 80014f0:	73fb      	strb	r3, [r7, #15]
					break;
 80014f2:	e04a      	b.n	800158a <showString+0x3e6>
				case 171: case 139:
					let_num = 26;
 80014f4:	231a      	movs	r3, #26
 80014f6:	73fb      	strb	r3, [r7, #15]
					break;
 80014f8:	e047      	b.n	800158a <showString+0x3e6>
				case 172: case 140:
					let_num = 27;
 80014fa:	231b      	movs	r3, #27
 80014fc:	73fb      	strb	r3, [r7, #15]
					break;
 80014fe:	e044      	b.n	800158a <showString+0x3e6>
				case 173: case 141:
					let_num = 28;
 8001500:	231c      	movs	r3, #28
 8001502:	73fb      	strb	r3, [r7, #15]
					break;
 8001504:	e041      	b.n	800158a <showString+0x3e6>
				case 174: case 142:
					let_num = 29;
 8001506:	231d      	movs	r3, #29
 8001508:	73fb      	strb	r3, [r7, #15]
					break;
 800150a:	e03e      	b.n	800158a <showString+0x3e6>
				case 175: case 143:
					let_num = 30;
 800150c:	231e      	movs	r3, #30
 800150e:	73fb      	strb	r3, [r7, #15]
					break;
 8001510:	e03b      	b.n	800158a <showString+0x3e6>
				case 48:
					let_num = 31;
 8001512:	231f      	movs	r3, #31
 8001514:	73fb      	strb	r3, [r7, #15]
					break;
 8001516:	e038      	b.n	800158a <showString+0x3e6>
				case 49:
					let_num = 32;
 8001518:	2320      	movs	r3, #32
 800151a:	73fb      	strb	r3, [r7, #15]
					break;
 800151c:	e035      	b.n	800158a <showString+0x3e6>
				case 50:
					let_num = 33;
 800151e:	2321      	movs	r3, #33	; 0x21
 8001520:	73fb      	strb	r3, [r7, #15]
					break;
 8001522:	e032      	b.n	800158a <showString+0x3e6>
				case 51:
					let_num = 34;
 8001524:	2322      	movs	r3, #34	; 0x22
 8001526:	73fb      	strb	r3, [r7, #15]
					break;
 8001528:	e02f      	b.n	800158a <showString+0x3e6>
				case 52:
					let_num = 35;
 800152a:	2323      	movs	r3, #35	; 0x23
 800152c:	73fb      	strb	r3, [r7, #15]
					break;
 800152e:	e02c      	b.n	800158a <showString+0x3e6>
				case 53:
					let_num = 36;
 8001530:	2324      	movs	r3, #36	; 0x24
 8001532:	73fb      	strb	r3, [r7, #15]
					break;
 8001534:	e029      	b.n	800158a <showString+0x3e6>
				case 54:
					let_num = 37;
 8001536:	2325      	movs	r3, #37	; 0x25
 8001538:	73fb      	strb	r3, [r7, #15]
					break;
 800153a:	e026      	b.n	800158a <showString+0x3e6>
				case 55:
					let_num = 38;
 800153c:	2326      	movs	r3, #38	; 0x26
 800153e:	73fb      	strb	r3, [r7, #15]
					break;
 8001540:	e023      	b.n	800158a <showString+0x3e6>
				case 56:
					let_num = 39;
 8001542:	2327      	movs	r3, #39	; 0x27
 8001544:	73fb      	strb	r3, [r7, #15]
					break;
 8001546:	e020      	b.n	800158a <showString+0x3e6>
				case 57:
					let_num = 40;
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	73fb      	strb	r3, [r7, #15]
					break;
 800154c:	e01d      	b.n	800158a <showString+0x3e6>
				case 58:
					let_num = 41;
 800154e:	2329      	movs	r3, #41	; 0x29
 8001550:	73fb      	strb	r3, [r7, #15]
					break;
 8001552:	e01a      	b.n	800158a <showString+0x3e6>
				case 59:
					let_num = 42;
 8001554:	232a      	movs	r3, #42	; 0x2a
 8001556:	73fb      	strb	r3, [r7, #15]
					break;
 8001558:	e017      	b.n	800158a <showString+0x3e6>
				case 44:
					let_num = 43;
 800155a:	232b      	movs	r3, #43	; 0x2b
 800155c:	73fb      	strb	r3, [r7, #15]
					break;
 800155e:	e014      	b.n	800158a <showString+0x3e6>
				case 46:
					let_num = 44;
 8001560:	232c      	movs	r3, #44	; 0x2c
 8001562:	73fb      	strb	r3, [r7, #15]
					break;
 8001564:	e011      	b.n	800158a <showString+0x3e6>
				case 43:
					let_num = 45;
 8001566:	232d      	movs	r3, #45	; 0x2d
 8001568:	73fb      	strb	r3, [r7, #15]
					break;
 800156a:	e00e      	b.n	800158a <showString+0x3e6>
				case 45:
					let_num = 46;
 800156c:	232e      	movs	r3, #46	; 0x2e
 800156e:	73fb      	strb	r3, [r7, #15]
					break;
 8001570:	e00b      	b.n	800158a <showString+0x3e6>
				case 32:
					let_num = 50;
 8001572:	2332      	movs	r3, #50	; 0x32
 8001574:	73fb      	strb	r3, [r7, #15]
					break;
 8001576:	e008      	b.n	800158a <showString+0x3e6>
				case 64:
					let_num = 47;
 8001578:	232f      	movs	r3, #47	; 0x2f
 800157a:	73fb      	strb	r3, [r7, #15]
					break;
 800157c:	e005      	b.n	800158a <showString+0x3e6>
				case 60:
					let_num = 49;
 800157e:	2331      	movs	r3, #49	; 0x31
 8001580:	73fb      	strb	r3, [r7, #15]
					break;
 8001582:	e002      	b.n	800158a <showString+0x3e6>
				case 62:
					let_num = 48;
 8001584:	2330      	movs	r3, #48	; 0x30
 8001586:	73fb      	strb	r3, [r7, #15]
					break;
 8001588:	bf00      	nop
			}

			if(if_ticker) for(uint8_t lin = 0; lin < 8; lin++) BufferTabloTicker[lin][num_tpic] = letters_and_numbers[let_num][lin];
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <showString+0x484>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01c      	beq.n	80015cc <showString+0x428>
 8001592:	2300      	movs	r3, #0
 8001594:	737b      	strb	r3, [r7, #13]
 8001596:	e015      	b.n	80015c4 <showString+0x420>
 8001598:	7bf8      	ldrb	r0, [r7, #15]
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	7b7a      	ldrb	r2, [r7, #13]
 800159e:	79f9      	ldrb	r1, [r7, #7]
 80015a0:	4c22      	ldr	r4, [pc, #136]	; (800162c <showString+0x488>)
 80015a2:	00c0      	lsls	r0, r0, #3
 80015a4:	4420      	add	r0, r4
 80015a6:	4403      	add	r3, r0
 80015a8:	781c      	ldrb	r4, [r3, #0]
 80015aa:	4821      	ldr	r0, [pc, #132]	; (8001630 <showString+0x48c>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	011a      	lsls	r2, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	4403      	add	r3, r0
 80015b8:	440b      	add	r3, r1
 80015ba:	4622      	mov	r2, r4
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	3301      	adds	r3, #1
 80015c2:	737b      	strb	r3, [r7, #13]
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d9e6      	bls.n	8001598 <showString+0x3f4>
 80015ca:	e019      	b.n	8001600 <showString+0x45c>
			else	for(uint8_t lin = 0; lin < 8; lin++) BufferTablo[lin][num_tpic] = letters_and_numbers[let_num][lin];
 80015cc:	2300      	movs	r3, #0
 80015ce:	733b      	strb	r3, [r7, #12]
 80015d0:	e013      	b.n	80015fa <showString+0x456>
 80015d2:	7bf8      	ldrb	r0, [r7, #15]
 80015d4:	7b3b      	ldrb	r3, [r7, #12]
 80015d6:	7b3a      	ldrb	r2, [r7, #12]
 80015d8:	79f9      	ldrb	r1, [r7, #7]
 80015da:	4c14      	ldr	r4, [pc, #80]	; (800162c <showString+0x488>)
 80015dc:	00c0      	lsls	r0, r0, #3
 80015de:	4420      	add	r0, r4
 80015e0:	4403      	add	r3, r0
 80015e2:	781c      	ldrb	r4, [r3, #0]
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <showString+0x490>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	4403      	add	r3, r0
 80015ee:	440b      	add	r3, r1
 80015f0:	4622      	mov	r2, r4
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	7b3b      	ldrb	r3, [r7, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	733b      	strb	r3, [r7, #12]
 80015fa:	7b3b      	ldrb	r3, [r7, #12]
 80015fc:	2b07      	cmp	r3, #7
 80015fe:	d9e8      	bls.n	80015d2 <showString+0x42e>
			num_tpic = sortTPIC(num_tpic);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f818 	bl	8001638 <sortTPIC>
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t s = 0; st[s] != 0; s++){
 800160c:	7bbb      	ldrb	r3, [r7, #14]
 800160e:	3301      	adds	r3, #1
 8001610:	73bb      	strb	r3, [r7, #14]
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f47f adcb 	bne.w	80011b6 <showString+0x12>
		}
	}
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}
 8001628:	2000059c 	.word	0x2000059c
 800162c:	08007160 	.word	0x08007160
 8001630:	200000d4 	.word	0x200000d4
 8001634:	2000005c 	.word	0x2000005c

08001638 <sortTPIC>:

uint8_t sortTPIC(uint8_t current_tpic)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	uint8_t next_tpic;
	next_tpic = current_tpic + numbers_line_matrix;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	3303      	adds	r3, #3
 8001646:	73fb      	strb	r3, [r7, #15]
	return next_tpic;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <offTablo>:

void offTablo(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	for(uint8_t str = 0; str < 8; str++)
 800165a:	2300      	movs	r3, #0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	e015      	b.n	800168c <offTablo+0x38>
		for(uint8_t tpic = 0; tpic < matrix_in_tablo; tpic++)
 8001660:	2300      	movs	r3, #0
 8001662:	71bb      	strb	r3, [r7, #6]
 8001664:	e00c      	b.n	8001680 <offTablo+0x2c>
			BufferTablo[str][tpic] = 0x00;
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	79b9      	ldrb	r1, [r7, #6]
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <offTablo+0x48>)
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	4403      	add	r3, r0
 8001674:	440b      	add	r3, r1
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		for(uint8_t tpic = 0; tpic < matrix_in_tablo; tpic++)
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	3301      	adds	r3, #1
 800167e:	71bb      	strb	r3, [r7, #6]
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b0e      	cmp	r3, #14
 8001684:	d9ef      	bls.n	8001666 <offTablo+0x12>
	for(uint8_t str = 0; str < 8; str++)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	3301      	adds	r3, #1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b07      	cmp	r3, #7
 8001690:	d9e6      	bls.n	8001660 <offTablo+0xc>
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	2000005c 	.word	0x2000005c

080016a0 <setTicker>:
			BufferTablo[x][num_tpic] = letters_and_numbers[47][x];
	}
}

void setTicker(uint8_t num_tpic, char* st)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
	if_ticker = 1;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <setTicker+0x2c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
	showString(num_tpic, st);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	6839      	ldr	r1, [r7, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fd74 	bl	80011a4 <showString>
	if_ticker = 0;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <setTicker+0x2c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000059c 	.word	0x2000059c

080016d0 <showTicker>:

void showTicker(uint8_t num_tpic_start, uint8_t num_tpic_stop)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
  if(temp_line){
 80016e0:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <showTicker+0x1c4>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03e      	beq.n	8001766 <showTicker+0x96>
    if(temp_line1 == 255){
 80016e8:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <showTicker+0x1c8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2bff      	cmp	r3, #255	; 0xff
 80016ee:	d109      	bne.n	8001704 <showTicker+0x34>
      temp_line1 = num_tpic_start;
 80016f0:	4a69      	ldr	r2, [pc, #420]	; (8001898 <showTicker+0x1c8>)
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	7013      	strb	r3, [r2, #0]
      count_line++;
 80016f6:	4b69      	ldr	r3, [pc, #420]	; (800189c <showTicker+0x1cc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b67      	ldr	r3, [pc, #412]	; (800189c <showTicker+0x1cc>)
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e030      	b.n	8001766 <showTicker+0x96>
    }
    else if(temp_line2 == 255  && num_tpic_start != temp_line1){
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <showTicker+0x1d0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2bff      	cmp	r3, #255	; 0xff
 800170a:	d10e      	bne.n	800172a <showTicker+0x5a>
 800170c:	4b62      	ldr	r3, [pc, #392]	; (8001898 <showTicker+0x1c8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	429a      	cmp	r2, r3
 8001714:	d009      	beq.n	800172a <showTicker+0x5a>
      temp_line2 = num_tpic_start;
 8001716:	4a62      	ldr	r2, [pc, #392]	; (80018a0 <showTicker+0x1d0>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	7013      	strb	r3, [r2, #0]
      count_line++;
 800171c:	4b5f      	ldr	r3, [pc, #380]	; (800189c <showTicker+0x1cc>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b5d      	ldr	r3, [pc, #372]	; (800189c <showTicker+0x1cc>)
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e01d      	b.n	8001766 <showTicker+0x96>
    }
    else if(temp_line3 == 255 && num_tpic_start != temp_line1 && num_tpic_start != temp_line2){
 800172a:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <showTicker+0x1d4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d116      	bne.n	8001760 <showTicker+0x90>
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <showTicker+0x1c8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	429a      	cmp	r2, r3
 800173a:	d011      	beq.n	8001760 <showTicker+0x90>
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <showTicker+0x1d0>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	429a      	cmp	r2, r3
 8001744:	d00c      	beq.n	8001760 <showTicker+0x90>
      temp_line3 = num_tpic_start;
 8001746:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <showTicker+0x1d4>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	7013      	strb	r3, [r2, #0]
      count_line++;
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <showTicker+0x1cc>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b51      	ldr	r3, [pc, #324]	; (800189c <showTicker+0x1cc>)
 8001756:	701a      	strb	r2, [r3, #0]
      temp_line = 0;
 8001758:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <showTicker+0x1c4>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e002      	b.n	8001766 <showTicker+0x96>
    }
    else temp_line = 0;
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <showTicker+0x1c4>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  }
    
	if(show_seven_lines >= speed_ticker_line){
 8001766:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <showTicker+0x1d8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b09      	cmp	r3, #9
 800176c:	f340 808d 	ble.w	800188a <showTicker+0x1ba>
		uint8_t tota_number_shifts;
	  uint8_t temp1, temp2, temp_start;

	  uint8_t num_line_shift = num_tpic_start + numbers_line_matrix;
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	3303      	adds	r3, #3
 8001774:	737b      	strb	r3, [r7, #13]
		num_line_shift = num_line_shift % numbers_line_matrix;
 8001776:	7b7a      	ldrb	r2, [r7, #13]
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <showTicker+0x1dc>)
 800177a:	fba3 1302 	umull	r1, r3, r3, r2
 800177e:	0859      	lsrs	r1, r3, #1
 8001780:	460b      	mov	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	440b      	add	r3, r1
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	737b      	strb	r3, [r7, #13]

		uint8_t sdv = num_shift_ticker[num_line_shift] / 8;
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <showTicker+0x1e0>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	733b      	strb	r3, [r7, #12]

	  sdv *= numbers_line_matrix;
 8001794:	7b3b      	ldrb	r3, [r7, #12]
 8001796:	461a      	mov	r2, r3
 8001798:	0052      	lsls	r2, r2, #1
 800179a:	4413      	add	r3, r2
 800179c:	733b      	strb	r3, [r7, #12]
		tota_number_shifts = totalNumberShifts(num_tpic_start, num_tpic_stop);
 800179e:	79ba      	ldrb	r2, [r7, #6]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f88b 	bl	80018c0 <totalNumberShifts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	72fb      	strb	r3, [r7, #11]
		temp_start = num_tpic_start % numbers_line_matrix;
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <showTicker+0x1dc>)
 80017b2:	fba3 1302 	umull	r1, r3, r3, r2
 80017b6:	0859      	lsrs	r1, r3, #1
 80017b8:	460b      	mov	r3, r1
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	440b      	add	r3, r1
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	72bb      	strb	r3, [r7, #10]
		
		for(uint8_t num_s = 0; num_s < 8; num_s++){
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e03a      	b.n	800183e <showTicker+0x16e>
			for(uint8_t tpic = temp_start; tpic < matrix_in_tablo; tpic += numbers_line_matrix){
 80017c8:	7abb      	ldrb	r3, [r7, #10]
 80017ca:	73bb      	strb	r3, [r7, #14]
 80017cc:	e031      	b.n	8001832 <showTicker+0x162>
			    temp1 = BufferTabloTicker[num_s][tpic + sdv];
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	7bb9      	ldrb	r1, [r7, #14]
 80017d2:	7b3b      	ldrb	r3, [r7, #12]
 80017d4:	4419      	add	r1, r3
 80017d6:	4837      	ldr	r0, [pc, #220]	; (80018b4 <showTicker+0x1e4>)
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	011a      	lsls	r2, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	4403      	add	r3, r0
 80017e4:	440b      	add	r3, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	727b      	strb	r3, [r7, #9]
			    temp2 = BufferTabloTicker[num_s][tpic + sdv + numbers_line_matrix];
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	7bb9      	ldrb	r1, [r7, #14]
 80017ee:	7b3b      	ldrb	r3, [r7, #12]
 80017f0:	440b      	add	r3, r1
 80017f2:	1cd9      	adds	r1, r3, #3
 80017f4:	482f      	ldr	r0, [pc, #188]	; (80018b4 <showTicker+0x1e4>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	011a      	lsls	r2, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	4403      	add	r3, r0
 8001802:	440b      	add	r3, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	723b      	strb	r3, [r7, #8]
				BufferTablo[num_s][tpic] = shift_byte(temp1, temp2, num_line_shift);
 8001808:	7bfc      	ldrb	r4, [r7, #15]
 800180a:	7bbd      	ldrb	r5, [r7, #14]
 800180c:	7b7a      	ldrb	r2, [r7, #13]
 800180e:	7a39      	ldrb	r1, [r7, #8]
 8001810:	7a7b      	ldrb	r3, [r7, #9]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f886 	bl	8001924 <shift_byte>
 8001818:	4603      	mov	r3, r0
 800181a:	4619      	mov	r1, r3
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <showTicker+0x1e8>)
 800181e:	4623      	mov	r3, r4
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1b1b      	subs	r3, r3, r4
 8001824:	4413      	add	r3, r2
 8001826:	442b      	add	r3, r5
 8001828:	460a      	mov	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
			for(uint8_t tpic = temp_start; tpic < matrix_in_tablo; tpic += numbers_line_matrix){
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	3303      	adds	r3, #3
 8001830:	73bb      	strb	r3, [r7, #14]
 8001832:	7bbb      	ldrb	r3, [r7, #14]
 8001834:	2b0e      	cmp	r3, #14
 8001836:	d9ca      	bls.n	80017ce <showTicker+0xfe>
		for(uint8_t num_s = 0; num_s < 8; num_s++){
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3301      	adds	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2b07      	cmp	r3, #7
 8001842:	d9c1      	bls.n	80017c8 <showTicker+0xf8>
			}
		}
		
		num_shift_ticker[num_line_shift]++;
 8001844:	7b7b      	ldrb	r3, [r7, #13]
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <showTicker+0x1e0>)
 8001848:	5cd2      	ldrb	r2, [r2, r3]
 800184a:	3201      	adds	r2, #1
 800184c:	b2d1      	uxtb	r1, r2
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <showTicker+0x1e0>)
 8001850:	54d1      	strb	r1, [r2, r3]
		if(num_shift_ticker[num_line_shift] > tota_number_shifts) num_shift_ticker[num_line_shift] = 0;
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <showTicker+0x1e0>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	7afa      	ldrb	r2, [r7, #11]
 800185a:	429a      	cmp	r2, r3
 800185c:	d203      	bcs.n	8001866 <showTicker+0x196>
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <showTicker+0x1e0>)
 8001862:	2100      	movs	r1, #0
 8001864:	54d1      	strb	r1, [r2, r3]
		
		count_line_ticker++;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <showTicker+0x1ec>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <showTicker+0x1ec>)
 8001870:	701a      	strb	r2, [r3, #0]
		if(count_line_ticker == count_line){
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <showTicker+0x1ec>)
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <showTicker+0x1cc>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d105      	bne.n	800188a <showTicker+0x1ba>
		  show_seven_lines = 0;
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <showTicker+0x1d8>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
		  count_line_ticker = 0;
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <showTicker+0x1ec>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bdb0      	pop	{r4, r5, r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000005 	.word	0x20000005
 800189c:	200005a5 	.word	0x200005a5
 80018a0:	20000006 	.word	0x20000006
 80018a4:	20000007 	.word	0x20000007
 80018a8:	200005a0 	.word	0x200005a0
 80018ac:	aaaaaaab 	.word	0xaaaaaaab
 80018b0:	20000048 	.word	0x20000048
 80018b4:	200000d4 	.word	0x200000d4
 80018b8:	2000005c 	.word	0x2000005c
 80018bc:	200005a4 	.word	0x200005a4

080018c0 <totalNumberShifts>:

uint8_t totalNumberShifts(uint8_t num_tpic_start, uint8_t num_tpic_stop)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71bb      	strb	r3, [r7, #6]
	uint8_t temp3, temp4, temp5, temp6;
	int ret;

	temp3 = num_tpic_start / numbers_line_matrix;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <totalNumberShifts+0x60>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	72fb      	strb	r3, [r7, #11]
	temp4 = (num_tpic_stop / numbers_line_matrix) + 1;
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <totalNumberShifts+0x60>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	72bb      	strb	r3, [r7, #10]
	temp5 = temp4 - temp3;
 80018ec:	7aba      	ldrb	r2, [r7, #10]
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	727b      	strb	r3, [r7, #9]
	temp6 = temp5 * 8;
 80018f4:	7a7b      	ldrb	r3, [r7, #9]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	723b      	strb	r3, [r7, #8]
	temp3 = (int)temp3;
	temp6 = (int)temp6;
	ret = (temp6 - 40) + (temp3 * 8);
 80018fa:	7a3b      	ldrb	r3, [r7, #8]
 80018fc:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
	if(ret <= 0) ret = 0;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc01      	bgt.n	8001912 <totalNumberShifts+0x52>
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
	return ret;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	b2db      	uxtb	r3, r3
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	aaaaaaab 	.word	0xaaaaaaab

08001924 <shift_byte>:

uint8_t shift_byte(uint8_t first_byte, uint8_t second_byte, uint8_t n_l_s)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	460b      	mov	r3, r1
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	717b      	strb	r3, [r7, #5]
	uint8_t sdvig = num_shift_ticker[n_l_s] % 8;
 8001936:	797b      	ldrb	r3, [r7, #5]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <shift_byte+0x4c>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	73fb      	strb	r3, [r7, #15]
	
	first_byte <<= sdvig;
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	71fb      	strb	r3, [r7, #7]
	second_byte = second_byte >> (8 - sdvig);
 800194c:	79ba      	ldrb	r2, [r7, #6]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	f1c3 0308 	rsb	r3, r3, #8
 8001954:	fa42 f303 	asr.w	r3, r2, r3
 8001958:	71bb      	strb	r3, [r7, #6]
	first_byte |= second_byte;
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	4313      	orrs	r3, r2
 8001960:	71fb      	strb	r3, [r7, #7]
	return first_byte;
 8001962:	79fb      	ldrb	r3, [r7, #7]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000048 	.word	0x20000048

08001974 <resetTicker>:

void resetTicker(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  offTablo();
 8001978:	f7ff fe6c 	bl	8001654 <offTablo>
  offTicker();
 800197c:	f000 f830 	bl	80019e0 <offTicker>
  num_shift_ticker[0] = 0;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <resetTicker+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
  num_shift_ticker[1] = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <resetTicker+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	705a      	strb	r2, [r3, #1]
  num_shift_ticker[2] = 0;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <resetTicker+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	709a      	strb	r2, [r3, #2]
  show_seven_lines = 0;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <resetTicker+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  count_line_ticker = 0;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <resetTicker+0x54>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
  
  count_line = 0;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <resetTicker+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
  temp_line1 = 255;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <resetTicker+0x5c>)
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	701a      	strb	r2, [r3, #0]
  temp_line2 = 255;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <resetTicker+0x60>)
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	701a      	strb	r2, [r3, #0]
  temp_line3 = 255;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <resetTicker+0x64>)
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	701a      	strb	r2, [r3, #0]
  temp_line = 1;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <resetTicker+0x68>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000048 	.word	0x20000048
 80019c4:	200005a0 	.word	0x200005a0
 80019c8:	200005a4 	.word	0x200005a4
 80019cc:	200005a5 	.word	0x200005a5
 80019d0:	20000005 	.word	0x20000005
 80019d4:	20000006 	.word	0x20000006
 80019d8:	20000007 	.word	0x20000007
 80019dc:	20000008 	.word	0x20000008

080019e0 <offTicker>:

void offTicker(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  for(uint8_t str = 0; str < 8; str++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	e017      	b.n	8001a1c <offTicker+0x3c>
		for(uint8_t tpic = 0; tpic < 153; tpic++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	71bb      	strb	r3, [r7, #6]
 80019f0:	e00e      	b.n	8001a10 <offTicker+0x30>
			BufferTabloTicker[str][tpic] = 0x00;
 80019f2:	79fa      	ldrb	r2, [r7, #7]
 80019f4:	79b9      	ldrb	r1, [r7, #6]
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <offTicker+0x4c>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	011a      	lsls	r2, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	4403      	add	r3, r0
 8001a04:	440b      	add	r3, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		for(uint8_t tpic = 0; tpic < 153; tpic++)
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	71bb      	strb	r3, [r7, #6]
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	2b98      	cmp	r3, #152	; 0x98
 8001a14:	d9ed      	bls.n	80019f2 <offTicker+0x12>
  for(uint8_t str = 0; str < 8; str++)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	d9e4      	bls.n	80019ec <offTicker+0xc>
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	200000d4 	.word	0x200000d4

08001a30 <I2C_WriteBuffer>:
uint8_t temperat_z = 0;
uint8_t size_string_day = 0;
uint8_t size_string_mounth = 0;

void I2C_WriteBuffer(I2C_HandleTypeDef struct_time, uint16_t DEV_ADDR, uint8_t size_buf)
{
 8001a30:	b084      	sub	sp, #16
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af02      	add	r7, sp, #8
 8001a38:	f107 0c08 	add.w	ip, r7, #8
 8001a3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Transmit(&struct_time, (uint16_t) DEV_ADDR, (uint8_t*) &Buffer_RTC, (uint16_t) size_buf, (uint32_t)1000) != HAL_OK)
 8001a40:	e003      	b.n	8001a4a <I2C_WriteBuffer+0x1a>
		if(HAL_I2C_GetError(&struct_time) != HAL_I2C_ERROR_AF) {}
 8001a42:	f107 0008 	add.w	r0, r7, #8
 8001a46:	f002 f957 	bl	8003cf8 <HAL_I2C_GetError>
	while(HAL_I2C_Master_Transmit(&struct_time, (uint16_t) DEV_ADDR, (uint8_t*) &Buffer_RTC, (uint16_t) size_buf, (uint32_t)1000) != HAL_OK)
 8001a4a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8001a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <I2C_WriteBuffer+0x48>)
 8001a5e:	f107 0008 	add.w	r0, r7, #8
 8001a62:	f001 fb9f 	bl	80031a4 <HAL_I2C_Master_Transmit>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ea      	bne.n	8001a42 <I2C_WriteBuffer+0x12>
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a74:	b004      	add	sp, #16
 8001a76:	4770      	bx	lr
 8001a78:	200006f8 	.word	0x200006f8

08001a7c <I2C_ReadBuffer>:

void I2C_ReadBuffer(I2C_HandleTypeDef struct_time, uint16_t DEV_ADDR, uint8_t size_buf)
{
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af02      	add	r7, sp, #8
 8001a84:	f107 0c08 	add.w	ip, r7, #8
 8001a88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Receive(&struct_time, (uint16_t) DEV_ADDR, (uint8_t*) &Buffer_RTC, (uint16_t) size_buf, (uint32_t)1000) != HAL_OK)
 8001a8c:	e003      	b.n	8001a96 <I2C_ReadBuffer+0x1a>
		if(HAL_I2C_GetError(&struct_time) != HAL_I2C_ERROR_AF) {}
 8001a8e:	f107 0008 	add.w	r0, r7, #8
 8001a92:	f002 f931 	bl	8003cf8 <HAL_I2C_GetError>
	while(HAL_I2C_Master_Receive(&struct_time, (uint16_t) DEV_ADDR, (uint8_t*) &Buffer_RTC, (uint16_t) size_buf, (uint32_t)1000) != HAL_OK)
 8001a96:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8001aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <I2C_ReadBuffer+0x48>)
 8001aaa:	f107 0008 	add.w	r0, r7, #8
 8001aae:	f001 fc77 	bl	80033a0 <HAL_I2C_Master_Receive>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ea      	bne.n	8001a8e <I2C_ReadBuffer+0x12>
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ac0:	b004      	add	sp, #16
 8001ac2:	4770      	bx	lr
 8001ac4:	200006f8 	.word	0x200006f8

08001ac8 <RTC_ConvertFromDec>:

uint8_t RTC_ConvertFromDec(uint8_t d)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = ((d >> 4) * 10 + (0x0F & d));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	73fb      	strb	r3, [r7, #15]
	return ch;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <RTC_ConvertFromBinDec>:

uint8_t RTC_ConvertFromBinDec(uint8_t d)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = ((d / 10) << 4) | (d % 10);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <RTC_ConvertFromBinDec+0x44>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	b258      	sxtb	r0, r3
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <RTC_ConvertFromBinDec+0x44>)
 8001b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1e:	08d9      	lsrs	r1, r3, #3
 8001b20:	460b      	mov	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	4303      	orrs	r3, r0
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
	return ch;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	cccccccd 	.word	0xcccccccd

08001b44 <temperatureDs3231>:

void temperatureDs3231(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
	if(temperat_z == 0) temperatureDs[0] = '+';
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <temperatureDs3231+0x84>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <temperatureDs3231+0x14>
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <temperatureDs3231+0x88>)
 8001b52:	222b      	movs	r2, #43	; 0x2b
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e002      	b.n	8001b5e <temperatureDs3231+0x1a>
	else temperatureDs[0] = '-';
 8001b58:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <temperatureDs3231+0x88>)
 8001b5a:	222d      	movs	r2, #45	; 0x2d
 8001b5c:	701a      	strb	r2, [r3, #0]
	temperatureDs[1] = (char) ((temperat1 / 10) % 10) + 0x30;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <temperatureDs3231+0x8c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <temperatureDs3231+0x90>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <temperatureDs3231+0x90>)
 8001b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b72:	08d9      	lsrs	r1, r3, #3
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3330      	adds	r3, #48	; 0x30
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <temperatureDs3231+0x88>)
 8001b86:	705a      	strb	r2, [r3, #1]
	temperatureDs[2] = (char) (temperat1 % 10) + 0x30;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <temperatureDs3231+0x8c>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <temperatureDs3231+0x90>)
 8001b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b92:	08d9      	lsrs	r1, r3, #3
 8001b94:	460b      	mov	r3, r1
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3330      	adds	r3, #48	; 0x30
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <temperatureDs3231+0x88>)
 8001ba6:	709a      	strb	r2, [r3, #2]
	temperatureDs[3] = '@';
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <temperatureDs3231+0x88>)
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	70da      	strb	r2, [r3, #3]
	temperatureDs[4] = 208;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <temperatureDs3231+0x88>)
 8001bb0:	22d0      	movs	r2, #208	; 0xd0
 8001bb2:	711a      	strb	r2, [r3, #4]
	temperatureDs[5] = 161;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <temperatureDs3231+0x88>)
 8001bb6:	22a1      	movs	r2, #161	; 0xa1
 8001bb8:	715a      	strb	r2, [r3, #5]
	temperatureDs[6] = '\0';
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <temperatureDs3231+0x88>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	719a      	strb	r2, [r3, #6]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	200005af 	.word	0x200005af
 8001bcc:	200006f0 	.word	0x200006f0
 8001bd0:	200005ae 	.word	0x200005ae
 8001bd4:	cccccccd 	.word	0xcccccccd

08001bd8 <convertUintToChar>:

void convertUintToChar(uint8_t x)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  s_uint_to_char[0] = (char) ((x / 10) % 10) + 0x30;
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <convertUintToChar+0x60>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <convertUintToChar+0x60>)
 8001bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf4:	08d9      	lsrs	r1, r3, #3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3330      	adds	r3, #48	; 0x30
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <convertUintToChar+0x64>)
 8001c08:	701a      	strb	r2, [r3, #0]
  s_uint_to_char[1] = (char) (x % 10) + 0x30;
 8001c0a:	79fa      	ldrb	r2, [r7, #7]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <convertUintToChar+0x60>)
 8001c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c12:	08d9      	lsrs	r1, r3, #3
 8001c14:	460b      	mov	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3330      	adds	r3, #48	; 0x30
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <convertUintToChar+0x64>)
 8001c26:	705a      	strb	r2, [r3, #1]
  s_uint_to_char[2] = '\0';
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <convertUintToChar+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	709a      	strb	r2, [r3, #2]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	200006e4 	.word	0x200006e4

08001c40 <setTime>:

void setTime(void)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b095      	sub	sp, #84	; 0x54
 8001c44:	af14      	add	r7, sp, #80	; 0x50
  Buffer_RTC[0] = 0x00;
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <setTime+0xe0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
  Buffer_RTC[1] = RTC_ConvertFromBinDec(sec);//секунды(0-59)
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <setTime+0xe4>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff53 	bl	8001afc <RTC_ConvertFromBinDec>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <setTime+0xe0>)
 8001c5c:	705a      	strb	r2, [r3, #1]
  Buffer_RTC[2] = RTC_ConvertFromBinDec(min);//минуты(0-59)
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <setTime+0xe8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff4a 	bl	8001afc <RTC_ConvertFromBinDec>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <setTime+0xe0>)
 8001c6e:	709a      	strb	r2, [r3, #2]
  Buffer_RTC[3] = RTC_ConvertFromBinDec(hour);//часы(1-12+AM/PM или 00-23)
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <setTime+0xec>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff41 	bl	8001afc <RTC_ConvertFromBinDec>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <setTime+0xe0>)
 8001c80:	70da      	strb	r2, [r3, #3]
  Buffer_RTC[4] = RTC_ConvertFromBinDec(day);//день недели(1 вос - 7 суб)
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <setTime+0xf0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff38 	bl	8001afc <RTC_ConvertFromBinDec>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <setTime+0xe0>)
 8001c92:	711a      	strb	r2, [r3, #4]
  Buffer_RTC[5] = RTC_ConvertFromBinDec(date);//дата(01-31)
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <setTime+0xf4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff2f 	bl	8001afc <RTC_ConvertFromBinDec>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <setTime+0xe0>)
 8001ca4:	715a      	strb	r2, [r3, #5]
  Buffer_RTC[6] = RTC_ConvertFromBinDec(mounth);//месяц(01-12)
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <setTime+0xf8>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff26 	bl	8001afc <RTC_ConvertFromBinDec>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <setTime+0xe0>)
 8001cb6:	719a      	strb	r2, [r3, #6]
  Buffer_RTC[7] = RTC_ConvertFromBinDec(year);//год(00-99)
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <setTime+0xfc>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff1d 	bl	8001afc <RTC_ConvertFromBinDec>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <setTime+0xe0>)
 8001cc8:	71da      	strb	r2, [r3, #7]
  I2C_WriteBuffer(hi2c2, (uint16_t) 0xD0, 1);
 8001cca:	4c1d      	ldr	r4, [pc, #116]	; (8001d40 <setTime+0x100>)
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9312      	str	r3, [sp, #72]	; 0x48
 8001cd0:	23d0      	movs	r3, #208	; 0xd0
 8001cd2:	9311      	str	r3, [sp, #68]	; 0x44
 8001cd4:	4668      	mov	r0, sp
 8001cd6:	f104 0310 	add.w	r3, r4, #16
 8001cda:	2244      	movs	r2, #68	; 0x44
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f005 f975 	bl	8006fcc <memcpy>
 8001ce2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ce6:	f7ff fea3 	bl	8001a30 <I2C_WriteBuffer>
  while(HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY) {}
 8001cea:	bf00      	nop
 8001cec:	4814      	ldr	r0, [pc, #80]	; (8001d40 <setTime+0x100>)
 8001cee:	f001 fff6 	bl	8003cde <HAL_I2C_GetState>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d1f9      	bne.n	8001cec <setTime+0xac>
  I2C_WriteBuffer(hi2c2, (uint16_t) 0xD0, 8);
 8001cf8:	4c11      	ldr	r4, [pc, #68]	; (8001d40 <setTime+0x100>)
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	9312      	str	r3, [sp, #72]	; 0x48
 8001cfe:	23d0      	movs	r3, #208	; 0xd0
 8001d00:	9311      	str	r3, [sp, #68]	; 0x44
 8001d02:	4668      	mov	r0, sp
 8001d04:	f104 0310 	add.w	r3, r4, #16
 8001d08:	2244      	movs	r2, #68	; 0x44
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f005 f95e 	bl	8006fcc <memcpy>
 8001d10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d14:	f7ff fe8c 	bl	8001a30 <I2C_WriteBuffer>
}
 8001d18:	bf00      	nop
 8001d1a:	3704      	adds	r7, #4
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	200006f8 	.word	0x200006f8
 8001d24:	200005a7 	.word	0x200005a7
 8001d28:	200005a8 	.word	0x200005a8
 8001d2c:	200005a9 	.word	0x200005a9
 8001d30:	200005aa 	.word	0x200005aa
 8001d34:	200005ab 	.word	0x200005ab
 8001d38:	200005ac 	.word	0x200005ac
 8001d3c:	200005ad 	.word	0x200005ad
 8001d40:	20000610 	.word	0x20000610

08001d44 <getRTC>:

void getRTC(void)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b095      	sub	sp, #84	; 0x54
 8001d48:	af14      	add	r7, sp, #80	; 0x50
  Buffer_RTC[0] = 0x00;
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <getRTC+0xfc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
	I2C_WriteBuffer(hi2c2, (uint16_t)0xD0, (uint8_t)1);
 8001d50:	4c3c      	ldr	r4, [pc, #240]	; (8001e44 <getRTC+0x100>)
 8001d52:	2301      	movs	r3, #1
 8001d54:	9312      	str	r3, [sp, #72]	; 0x48
 8001d56:	23d0      	movs	r3, #208	; 0xd0
 8001d58:	9311      	str	r3, [sp, #68]	; 0x44
 8001d5a:	4668      	mov	r0, sp
 8001d5c:	f104 0310 	add.w	r3, r4, #16
 8001d60:	2244      	movs	r2, #68	; 0x44
 8001d62:	4619      	mov	r1, r3
 8001d64:	f005 f932 	bl	8006fcc <memcpy>
 8001d68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d6c:	f7ff fe60 	bl	8001a30 <I2C_WriteBuffer>
	while(HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY) {}
 8001d70:	bf00      	nop
 8001d72:	4834      	ldr	r0, [pc, #208]	; (8001e44 <getRTC+0x100>)
 8001d74:	f001 ffb3 	bl	8003cde <HAL_I2C_GetState>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d1f9      	bne.n	8001d72 <getRTC+0x2e>
	I2C_ReadBuffer(hi2c2, (uint16_t)0xD0, (uint8_t)18);
 8001d7e:	4c31      	ldr	r4, [pc, #196]	; (8001e44 <getRTC+0x100>)
 8001d80:	2312      	movs	r3, #18
 8001d82:	9312      	str	r3, [sp, #72]	; 0x48
 8001d84:	23d0      	movs	r3, #208	; 0xd0
 8001d86:	9311      	str	r3, [sp, #68]	; 0x44
 8001d88:	4668      	mov	r0, sp
 8001d8a:	f104 0310 	add.w	r3, r4, #16
 8001d8e:	2244      	movs	r2, #68	; 0x44
 8001d90:	4619      	mov	r1, r3
 8001d92:	f005 f91b 	bl	8006fcc <memcpy>
 8001d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d9a:	f7ff fe6f 	bl	8001a7c <I2C_ReadBuffer>
	sec = RTC_ConvertFromDec(Buffer_RTC[0]);
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <getRTC+0xfc>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe90 	bl	8001ac8 <RTC_ConvertFromDec>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <getRTC+0x104>)
 8001dae:	701a      	strb	r2, [r3, #0]
	min = RTC_ConvertFromDec(Buffer_RTC[1]);
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <getRTC+0xfc>)
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fe87 	bl	8001ac8 <RTC_ConvertFromDec>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <getRTC+0x108>)
 8001dc0:	701a      	strb	r2, [r3, #0]
	hour = RTC_ConvertFromDec(Buffer_RTC[2]);
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <getRTC+0xfc>)
 8001dc4:	789b      	ldrb	r3, [r3, #2]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fe7e 	bl	8001ac8 <RTC_ConvertFromDec>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <getRTC+0x10c>)
 8001dd2:	701a      	strb	r2, [r3, #0]
	day = RTC_ConvertFromDec(Buffer_RTC[3]);
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <getRTC+0xfc>)
 8001dd6:	78db      	ldrb	r3, [r3, #3]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fe75 	bl	8001ac8 <RTC_ConvertFromDec>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <getRTC+0x110>)
 8001de4:	701a      	strb	r2, [r3, #0]
	date = RTC_ConvertFromDec(Buffer_RTC[4]);
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <getRTC+0xfc>)
 8001de8:	791b      	ldrb	r3, [r3, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe6c 	bl	8001ac8 <RTC_ConvertFromDec>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <getRTC+0x114>)
 8001df6:	701a      	strb	r2, [r3, #0]
	mounth = RTC_ConvertFromDec(Buffer_RTC[5]);
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <getRTC+0xfc>)
 8001dfa:	795b      	ldrb	r3, [r3, #5]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe63 	bl	8001ac8 <RTC_ConvertFromDec>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <getRTC+0x118>)
 8001e08:	701a      	strb	r2, [r3, #0]
	year = RTC_ConvertFromDec(Buffer_RTC[6]);
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <getRTC+0xfc>)
 8001e0c:	799b      	ldrb	r3, [r3, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fe5a 	bl	8001ac8 <RTC_ConvertFromDec>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <getRTC+0x11c>)
 8001e1a:	701a      	strb	r2, [r3, #0]
	temperat1 = Buffer_RTC[17] & 0b01111111;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <getRTC+0xfc>)
 8001e1e:	7c5b      	ldrb	r3, [r3, #17]
 8001e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <getRTC+0x120>)
 8001e28:	701a      	strb	r2, [r3, #0]
	temperat_z = Buffer_RTC[17] & 0b10000000;
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <getRTC+0xfc>)
 8001e2c:	7c5b      	ldrb	r3, [r3, #17]
 8001e2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <getRTC+0x124>)
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3704      	adds	r7, #4
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	200006f8 	.word	0x200006f8
 8001e44:	20000610 	.word	0x20000610
 8001e48:	200005a7 	.word	0x200005a7
 8001e4c:	200005a8 	.word	0x200005a8
 8001e50:	200005a9 	.word	0x200005a9
 8001e54:	200005aa 	.word	0x200005aa
 8001e58:	200005ab 	.word	0x200005ab
 8001e5c:	200005ac 	.word	0x200005ac
 8001e60:	200005ad 	.word	0x200005ad
 8001e64:	200005ae 	.word	0x200005ae
 8001e68:	200005af 	.word	0x200005af

08001e6c <getTimeMi>:
	char *s1 = s_uint_to_char;
	return s1;
}

char *getTimeMi(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
	convertUintToChar(min);
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <getTimeMi+0x20>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff feae 	bl	8001bd8 <convertUintToChar>
	char *s1 = s_uint_to_char;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <getTimeMi+0x24>)
 8001e7e:	607b      	str	r3, [r7, #4]
	return s1;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200005a8 	.word	0x200005a8
 8001e90:	200006e4 	.word	0x200006e4

08001e94 <getTimeH>:

char *getTimeH(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
	convertUintToChar(hour);
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <getTimeH+0x20>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe9a 	bl	8001bd8 <convertUintToChar>
	char *s1 = s_uint_to_char;
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <getTimeH+0x24>)
 8001ea6:	607b      	str	r3, [r7, #4]
  return s1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200005a9 	.word	0x200005a9
 8001eb8:	200006e4 	.word	0x200006e4

08001ebc <getTimeDW>:

char *getTimeDW(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
	convertUintToChar(day);
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <getTimeDW+0x20>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fe86 	bl	8001bd8 <convertUintToChar>
	char *s1 = s_uint_to_char;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <getTimeDW+0x24>)
 8001ece:	607b      	str	r3, [r7, #4]
  return s1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200005aa 	.word	0x200005aa
 8001ee0:	200006e4 	.word	0x200006e4

08001ee4 <getTimeDayW>:

char *getTimeDayW(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
  char *ds;
    
  switch(day){
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <getTimeDayW+0x94>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d83b      	bhi.n	8001f6c <getTimeDayW+0x88>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <getTimeDayW+0x18>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f19 	.word	0x08001f19
 8001f00:	08001f25 	.word	0x08001f25
 8001f04:	08001f31 	.word	0x08001f31
 8001f08:	08001f3d 	.word	0x08001f3d
 8001f0c:	08001f49 	.word	0x08001f49
 8001f10:	08001f55 	.word	0x08001f55
 8001f14:	08001f61 	.word	0x08001f61
    case 1:
      ds = "воскресенье";
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <getTimeDayW+0x98>)
 8001f1a:	607b      	str	r3, [r7, #4]
      size_string_day = 11;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <getTimeDayW+0x9c>)
 8001f1e:	220b      	movs	r2, #11
 8001f20:	701a      	strb	r2, [r3, #0]
      break;
 8001f22:	e023      	b.n	8001f6c <getTimeDayW+0x88>
    case 2:
      ds = "понедельник";
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <getTimeDayW+0xa0>)
 8001f26:	607b      	str	r3, [r7, #4]
      size_string_day = 11;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <getTimeDayW+0x9c>)
 8001f2a:	220b      	movs	r2, #11
 8001f2c:	701a      	strb	r2, [r3, #0]
      break;
 8001f2e:	e01d      	b.n	8001f6c <getTimeDayW+0x88>
    case 3:
      ds = "вторник";
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <getTimeDayW+0xa4>)
 8001f32:	607b      	str	r3, [r7, #4]
      size_string_day = 7;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <getTimeDayW+0x9c>)
 8001f36:	2207      	movs	r2, #7
 8001f38:	701a      	strb	r2, [r3, #0]
      break;
 8001f3a:	e017      	b.n	8001f6c <getTimeDayW+0x88>
    case 4:
      ds = "среда";
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <getTimeDayW+0xa8>)
 8001f3e:	607b      	str	r3, [r7, #4]
      size_string_day = 5;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <getTimeDayW+0x9c>)
 8001f42:	2205      	movs	r2, #5
 8001f44:	701a      	strb	r2, [r3, #0]
      break;
 8001f46:	e011      	b.n	8001f6c <getTimeDayW+0x88>
    case 5:
      ds = "четверг";
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <getTimeDayW+0xac>)
 8001f4a:	607b      	str	r3, [r7, #4]
      size_string_day = 7;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <getTimeDayW+0x9c>)
 8001f4e:	2207      	movs	r2, #7
 8001f50:	701a      	strb	r2, [r3, #0]
      break;
 8001f52:	e00b      	b.n	8001f6c <getTimeDayW+0x88>
    case 6:
      ds = "пятница";
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <getTimeDayW+0xb0>)
 8001f56:	607b      	str	r3, [r7, #4]
      size_string_day = 7;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <getTimeDayW+0x9c>)
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	701a      	strb	r2, [r3, #0]
      break;
 8001f5e:	e005      	b.n	8001f6c <getTimeDayW+0x88>
    case 7:
      ds = "суббота";
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <getTimeDayW+0xb4>)
 8001f62:	607b      	str	r3, [r7, #4]
      size_string_day = 7;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <getTimeDayW+0x9c>)
 8001f66:	2207      	movs	r2, #7
 8001f68:	701a      	strb	r2, [r3, #0]
      break;
 8001f6a:	bf00      	nop
  }

  return ds;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	200005aa 	.word	0x200005aa
 8001f7c:	08007020 	.word	0x08007020
 8001f80:	200005b0 	.word	0x200005b0
 8001f84:	08007038 	.word	0x08007038
 8001f88:	08007050 	.word	0x08007050
 8001f8c:	08007060 	.word	0x08007060
 8001f90:	0800706c 	.word	0x0800706c
 8001f94:	0800707c 	.word	0x0800707c
 8001f98:	0800708c 	.word	0x0800708c

08001f9c <getTimeDM>:

char *getTimeDM(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
	convertUintToChar(date);
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <getTimeDM+0x20>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe16 	bl	8001bd8 <convertUintToChar>
	char *s1 = s_uint_to_char;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <getTimeDM+0x24>)
 8001fae:	607b      	str	r3, [r7, #4]
  return s1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200005ab 	.word	0x200005ab
 8001fc0:	200006e4 	.word	0x200006e4

08001fc4 <getTimeMo>:

char *getTimeMo(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	convertUintToChar(mounth);
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <getTimeMo+0x20>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe02 	bl	8001bd8 <convertUintToChar>
	char *s1 = s_uint_to_char;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <getTimeMo+0x24>)
 8001fd6:	607b      	str	r3, [r7, #4]
  return s1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200005ac 	.word	0x200005ac
 8001fe8:	200006e4 	.word	0x200006e4

08001fec <getTimeMounth>:

char *getTimeMounth(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
  char *m;
    
  switch(mounth){
 8001ff2:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <getTimeMounth+0xe4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	2b0b      	cmp	r3, #11
 8001ffa:	d863      	bhi.n	80020c4 <getTimeMounth+0xd8>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <getTimeMounth+0x18>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002035 	.word	0x08002035
 8002008:	08002041 	.word	0x08002041
 800200c:	0800204d 	.word	0x0800204d
 8002010:	08002059 	.word	0x08002059
 8002014:	08002065 	.word	0x08002065
 8002018:	08002071 	.word	0x08002071
 800201c:	0800207d 	.word	0x0800207d
 8002020:	08002089 	.word	0x08002089
 8002024:	08002095 	.word	0x08002095
 8002028:	080020a1 	.word	0x080020a1
 800202c:	080020ad 	.word	0x080020ad
 8002030:	080020b9 	.word	0x080020b9
    case 1:
      m = "январь";
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <getTimeMounth+0xe8>)
 8002036:	607b      	str	r3, [r7, #4]
      size_string_mounth = 6;
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <getTimeMounth+0xec>)
 800203a:	2206      	movs	r2, #6
 800203c:	701a      	strb	r2, [r3, #0]
      break;
 800203e:	e041      	b.n	80020c4 <getTimeMounth+0xd8>
    case 2:
      m = "февраль";
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <getTimeMounth+0xf0>)
 8002042:	607b      	str	r3, [r7, #4]
      size_string_mounth = 7;
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <getTimeMounth+0xec>)
 8002046:	2207      	movs	r2, #7
 8002048:	701a      	strb	r2, [r3, #0]
      break;
 800204a:	e03b      	b.n	80020c4 <getTimeMounth+0xd8>
    case 3:
      m = "март";
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <getTimeMounth+0xf4>)
 800204e:	607b      	str	r3, [r7, #4]
      size_string_mounth = 4;
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <getTimeMounth+0xec>)
 8002052:	2204      	movs	r2, #4
 8002054:	701a      	strb	r2, [r3, #0]
      break;
 8002056:	e035      	b.n	80020c4 <getTimeMounth+0xd8>
    case 4:
      m = "апрель";
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <getTimeMounth+0xf8>)
 800205a:	607b      	str	r3, [r7, #4]
      size_string_mounth = 6;
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <getTimeMounth+0xec>)
 800205e:	2206      	movs	r2, #6
 8002060:	701a      	strb	r2, [r3, #0]
      break;
 8002062:	e02f      	b.n	80020c4 <getTimeMounth+0xd8>
    case 5:
      m = "май";
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <getTimeMounth+0xfc>)
 8002066:	607b      	str	r3, [r7, #4]
      size_string_mounth = 3;
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <getTimeMounth+0xec>)
 800206a:	2203      	movs	r2, #3
 800206c:	701a      	strb	r2, [r3, #0]
      break;
 800206e:	e029      	b.n	80020c4 <getTimeMounth+0xd8>
    case 6:
      m = "июнь";
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <getTimeMounth+0x100>)
 8002072:	607b      	str	r3, [r7, #4]
      size_string_mounth = 4;
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <getTimeMounth+0xec>)
 8002076:	2204      	movs	r2, #4
 8002078:	701a      	strb	r2, [r3, #0]
      break;
 800207a:	e023      	b.n	80020c4 <getTimeMounth+0xd8>
    case 7:
      m = "июль";
 800207c:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <getTimeMounth+0x104>)
 800207e:	607b      	str	r3, [r7, #4]
      size_string_mounth = 4;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <getTimeMounth+0xec>)
 8002082:	2204      	movs	r2, #4
 8002084:	701a      	strb	r2, [r3, #0]
      break;
 8002086:	e01d      	b.n	80020c4 <getTimeMounth+0xd8>
    case 8:
      m = "август";
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <getTimeMounth+0x108>)
 800208a:	607b      	str	r3, [r7, #4]
      size_string_mounth = 6;
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <getTimeMounth+0xec>)
 800208e:	2206      	movs	r2, #6
 8002090:	701a      	strb	r2, [r3, #0]
      break;
 8002092:	e017      	b.n	80020c4 <getTimeMounth+0xd8>
    case 9:
      m = "сентябрь";
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <getTimeMounth+0x10c>)
 8002096:	607b      	str	r3, [r7, #4]
      size_string_mounth = 8;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <getTimeMounth+0xec>)
 800209a:	2208      	movs	r2, #8
 800209c:	701a      	strb	r2, [r3, #0]
      break;
 800209e:	e011      	b.n	80020c4 <getTimeMounth+0xd8>
    case 10:
      m = "октябрь";
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <getTimeMounth+0x110>)
 80020a2:	607b      	str	r3, [r7, #4]
      size_string_mounth = 7;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <getTimeMounth+0xec>)
 80020a6:	2207      	movs	r2, #7
 80020a8:	701a      	strb	r2, [r3, #0]
      break;
 80020aa:	e00b      	b.n	80020c4 <getTimeMounth+0xd8>
    case 11:
      m = "ноябрь";
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <getTimeMounth+0x114>)
 80020ae:	607b      	str	r3, [r7, #4]
      size_string_mounth = 6;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <getTimeMounth+0xec>)
 80020b2:	2206      	movs	r2, #6
 80020b4:	701a      	strb	r2, [r3, #0]
      break;
 80020b6:	e005      	b.n	80020c4 <getTimeMounth+0xd8>
    case 12:
      m = "декабрь";
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <getTimeMounth+0x118>)
 80020ba:	607b      	str	r3, [r7, #4]
      size_string_mounth = 7;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <getTimeMounth+0xec>)
 80020be:	2207      	movs	r2, #7
 80020c0:	701a      	strb	r2, [r3, #0]
      break;
 80020c2:	bf00      	nop
  }
    
  return m;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	200005ac 	.word	0x200005ac
 80020d4:	0800709c 	.word	0x0800709c
 80020d8:	200005b1 	.word	0x200005b1
 80020dc:	080070ac 	.word	0x080070ac
 80020e0:	080070bc 	.word	0x080070bc
 80020e4:	080070c8 	.word	0x080070c8
 80020e8:	080070d8 	.word	0x080070d8
 80020ec:	080070e0 	.word	0x080070e0
 80020f0:	080070ec 	.word	0x080070ec
 80020f4:	080070f8 	.word	0x080070f8
 80020f8:	08007108 	.word	0x08007108
 80020fc:	0800711c 	.word	0x0800711c
 8002100:	0800712c 	.word	0x0800712c
 8002104:	0800713c 	.word	0x0800713c

08002108 <getTimeYe>:

char *getTimeYe(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  convertUintToChar(year);
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <getTimeYe+0x20>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd60 	bl	8001bd8 <convertUintToChar>
	char *s1 = s_uint_to_char;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <getTimeYe+0x24>)
 800211a:	607b      	str	r3, [r7, #4]
  return s1;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200005ad 	.word	0x200005ad
 800212c:	200006e4 	.word	0x200006e4

08002130 <getTimeY>:

void getTimeY(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	yearDs[0] = '2';
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <getTimeY+0x68>)
 8002136:	2232      	movs	r2, #50	; 0x32
 8002138:	701a      	strb	r2, [r3, #0]
	yearDs[1] = '0';
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <getTimeY+0x68>)
 800213c:	2230      	movs	r2, #48	; 0x30
 800213e:	705a      	strb	r2, [r3, #1]
	yearDs[2] = (char) ((year / 10) % 10) + 0x30;
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <getTimeY+0x6c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <getTimeY+0x70>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <getTimeY+0x70>)
 8002150:	fba3 1302 	umull	r1, r3, r3, r2
 8002154:	08d9      	lsrs	r1, r3, #3
 8002156:	460b      	mov	r3, r1
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	3330      	adds	r3, #48	; 0x30
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <getTimeY+0x68>)
 8002168:	709a      	strb	r2, [r3, #2]
	yearDs[3] = (char) (year % 10) + 0x30;
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <getTimeY+0x6c>)
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <getTimeY+0x70>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	08d9      	lsrs	r1, r3, #3
 8002176:	460b      	mov	r3, r1
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3330      	adds	r3, #48	; 0x30
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <getTimeY+0x68>)
 8002188:	70da      	strb	r2, [r3, #3]
	yearDs[4] = '\0';
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <getTimeY+0x68>)
 800218c:	2200      	movs	r2, #0
 800218e:	711a      	strb	r2, [r3, #4]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	200006e8 	.word	0x200006e8
 800219c:	200005ad 	.word	0x200005ad
 80021a0:	cccccccd 	.word	0xcccccccd

080021a4 <getSizeStringDay>:

uint8_t getSizeStringDay(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return size_string_day;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <getSizeStringDay+0x10>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	200005b0 	.word	0x200005b0

080021b8 <getSizeStringMounth>:

uint8_t getSizeStringMounth(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return size_string_mounth;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <getSizeStringMounth+0x10>)
 80021be:	781b      	ldrb	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	200005b1 	.word	0x200005b1

080021cc <automaticTimeTranslation>:


void automaticTimeTranslation(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  if(mounth == 10 && year == 20) translationMounthOctober(0);
 80021d0:	4b72      	ldr	r3, [pc, #456]	; (800239c <automaticTimeTranslation+0x1d0>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b0a      	cmp	r3, #10
 80021d6:	d107      	bne.n	80021e8 <automaticTimeTranslation+0x1c>
 80021d8:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b14      	cmp	r3, #20
 80021de:	d103      	bne.n	80021e8 <automaticTimeTranslation+0x1c>
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 f913 	bl	800240c <translationMounthOctober>
 80021e6:	e0d7      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 21) translationMounthMarch(1);
 80021e8:	4b6c      	ldr	r3, [pc, #432]	; (800239c <automaticTimeTranslation+0x1d0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d107      	bne.n	8002200 <automaticTimeTranslation+0x34>
 80021f0:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b15      	cmp	r3, #21
 80021f6:	d103      	bne.n	8002200 <automaticTimeTranslation+0x34>
 80021f8:	2001      	movs	r0, #1
 80021fa:	f000 f8d3 	bl	80023a4 <translationMounthMarch>
 80021fe:	e0cb      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 11 && year == 21) translationMounthOctober(2);
 8002200:	4b66      	ldr	r3, [pc, #408]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b0b      	cmp	r3, #11
 8002206:	d107      	bne.n	8002218 <automaticTimeTranslation+0x4c>
 8002208:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b15      	cmp	r3, #21
 800220e:	d103      	bne.n	8002218 <automaticTimeTranslation+0x4c>
 8002210:	2002      	movs	r0, #2
 8002212:	f000 f8fb 	bl	800240c <translationMounthOctober>
 8002216:	e0bf      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 22) translationMounthMarch(3);
 8002218:	4b60      	ldr	r3, [pc, #384]	; (800239c <automaticTimeTranslation+0x1d0>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d107      	bne.n	8002230 <automaticTimeTranslation+0x64>
 8002220:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b16      	cmp	r3, #22
 8002226:	d103      	bne.n	8002230 <automaticTimeTranslation+0x64>
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f8bb 	bl	80023a4 <translationMounthMarch>
 800222e:	e0b3      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 22) translationMounthOctober(4);
 8002230:	4b5a      	ldr	r3, [pc, #360]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b0a      	cmp	r3, #10
 8002236:	d107      	bne.n	8002248 <automaticTimeTranslation+0x7c>
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b16      	cmp	r3, #22
 800223e:	d103      	bne.n	8002248 <automaticTimeTranslation+0x7c>
 8002240:	2004      	movs	r0, #4
 8002242:	f000 f8e3 	bl	800240c <translationMounthOctober>
 8002246:	e0a7      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 23) translationMounthMarch(5);
 8002248:	4b54      	ldr	r3, [pc, #336]	; (800239c <automaticTimeTranslation+0x1d0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d107      	bne.n	8002260 <automaticTimeTranslation+0x94>
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b17      	cmp	r3, #23
 8002256:	d103      	bne.n	8002260 <automaticTimeTranslation+0x94>
 8002258:	2005      	movs	r0, #5
 800225a:	f000 f8a3 	bl	80023a4 <translationMounthMarch>
 800225e:	e09b      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 23) translationMounthOctober(6);
 8002260:	4b4e      	ldr	r3, [pc, #312]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b0a      	cmp	r3, #10
 8002266:	d107      	bne.n	8002278 <automaticTimeTranslation+0xac>
 8002268:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b17      	cmp	r3, #23
 800226e:	d103      	bne.n	8002278 <automaticTimeTranslation+0xac>
 8002270:	2006      	movs	r0, #6
 8002272:	f000 f8cb 	bl	800240c <translationMounthOctober>
 8002276:	e08f      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 4 && year == 24) translationMounthMarch(7);
 8002278:	4b48      	ldr	r3, [pc, #288]	; (800239c <automaticTimeTranslation+0x1d0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d107      	bne.n	8002290 <automaticTimeTranslation+0xc4>
 8002280:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b18      	cmp	r3, #24
 8002286:	d103      	bne.n	8002290 <automaticTimeTranslation+0xc4>
 8002288:	2007      	movs	r0, #7
 800228a:	f000 f88b 	bl	80023a4 <translationMounthMarch>
 800228e:	e083      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 24) translationMounthOctober(8);
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d107      	bne.n	80022a8 <automaticTimeTranslation+0xdc>
 8002298:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b18      	cmp	r3, #24
 800229e:	d103      	bne.n	80022a8 <automaticTimeTranslation+0xdc>
 80022a0:	2008      	movs	r0, #8
 80022a2:	f000 f8b3 	bl	800240c <translationMounthOctober>
 80022a6:	e077      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 25) translationMounthMarch(9);
 80022a8:	4b3c      	ldr	r3, [pc, #240]	; (800239c <automaticTimeTranslation+0x1d0>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d107      	bne.n	80022c0 <automaticTimeTranslation+0xf4>
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b19      	cmp	r3, #25
 80022b6:	d103      	bne.n	80022c0 <automaticTimeTranslation+0xf4>
 80022b8:	2009      	movs	r0, #9
 80022ba:	f000 f873 	bl	80023a4 <translationMounthMarch>
 80022be:	e06b      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 25) translationMounthOctober(10);
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <automaticTimeTranslation+0x1d0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b0a      	cmp	r3, #10
 80022c6:	d107      	bne.n	80022d8 <automaticTimeTranslation+0x10c>
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b19      	cmp	r3, #25
 80022ce:	d103      	bne.n	80022d8 <automaticTimeTranslation+0x10c>
 80022d0:	200a      	movs	r0, #10
 80022d2:	f000 f89b 	bl	800240c <translationMounthOctober>
 80022d6:	e05f      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 26) translationMounthMarch(11);
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <automaticTimeTranslation+0x1d0>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d107      	bne.n	80022f0 <automaticTimeTranslation+0x124>
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b1a      	cmp	r3, #26
 80022e6:	d103      	bne.n	80022f0 <automaticTimeTranslation+0x124>
 80022e8:	200b      	movs	r0, #11
 80022ea:	f000 f85b 	bl	80023a4 <translationMounthMarch>
 80022ee:	e053      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 26) translationMounthOctober(12);
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <automaticTimeTranslation+0x1d0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b0a      	cmp	r3, #10
 80022f6:	d107      	bne.n	8002308 <automaticTimeTranslation+0x13c>
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b1a      	cmp	r3, #26
 80022fe:	d103      	bne.n	8002308 <automaticTimeTranslation+0x13c>
 8002300:	200c      	movs	r0, #12
 8002302:	f000 f883 	bl	800240c <translationMounthOctober>
 8002306:	e047      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 27) translationMounthMarch(13);
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <automaticTimeTranslation+0x1d0>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d107      	bne.n	8002320 <automaticTimeTranslation+0x154>
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b1b      	cmp	r3, #27
 8002316:	d103      	bne.n	8002320 <automaticTimeTranslation+0x154>
 8002318:	200d      	movs	r0, #13
 800231a:	f000 f843 	bl	80023a4 <translationMounthMarch>
 800231e:	e03b      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 11 && year == 27) translationMounthOctober(14);
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b0b      	cmp	r3, #11
 8002326:	d107      	bne.n	8002338 <automaticTimeTranslation+0x16c>
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b1b      	cmp	r3, #27
 800232e:	d103      	bne.n	8002338 <automaticTimeTranslation+0x16c>
 8002330:	200e      	movs	r0, #14
 8002332:	f000 f86b 	bl	800240c <translationMounthOctober>
 8002336:	e02f      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 28) translationMounthMarch(15);
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <automaticTimeTranslation+0x1d0>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d107      	bne.n	8002350 <automaticTimeTranslation+0x184>
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b1c      	cmp	r3, #28
 8002346:	d103      	bne.n	8002350 <automaticTimeTranslation+0x184>
 8002348:	200f      	movs	r0, #15
 800234a:	f000 f82b 	bl	80023a4 <translationMounthMarch>
 800234e:	e023      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 28) translationMounthOctober(16);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b0a      	cmp	r3, #10
 8002356:	d107      	bne.n	8002368 <automaticTimeTranslation+0x19c>
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b1c      	cmp	r3, #28
 800235e:	d103      	bne.n	8002368 <automaticTimeTranslation+0x19c>
 8002360:	2010      	movs	r0, #16
 8002362:	f000 f853 	bl	800240c <translationMounthOctober>
 8002366:	e017      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 3 && year == 29) translationMounthMarch(17);
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <automaticTimeTranslation+0x1d0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d107      	bne.n	8002380 <automaticTimeTranslation+0x1b4>
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b1d      	cmp	r3, #29
 8002376:	d103      	bne.n	8002380 <automaticTimeTranslation+0x1b4>
 8002378:	2011      	movs	r0, #17
 800237a:	f000 f813 	bl	80023a4 <translationMounthMarch>
 800237e:	e00b      	b.n	8002398 <automaticTimeTranslation+0x1cc>
  else if(mounth == 10 && year == 29) translationMounthOctober(18);
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <automaticTimeTranslation+0x1d0>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b0a      	cmp	r3, #10
 8002386:	d107      	bne.n	8002398 <automaticTimeTranslation+0x1cc>
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <automaticTimeTranslation+0x1d4>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b1d      	cmp	r3, #29
 800238e:	d103      	bne.n	8002398 <automaticTimeTranslation+0x1cc>
 8002390:	2012      	movs	r0, #18
 8002392:	f000 f83b 	bl	800240c <translationMounthOctober>
}
 8002396:	e7ff      	b.n	8002398 <automaticTimeTranslation+0x1cc>
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200005ac 	.word	0x200005ac
 80023a0:	200005ad 	.word	0x200005ad

080023a4 <translationMounthMarch>:

void translationMounthMarch(uint8_t y)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if(date == array_Date_Automatic_Time_Translation[y]){
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <translationMounthMarch+0x58>)
 80023b2:	5cd2      	ldrb	r2, [r2, r3]
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <translationMounthMarch+0x5c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d11a      	bne.n	80023f2 <translationMounthMarch+0x4e>
    if(hour == 10 && !perevedeno){
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <translationMounthMarch+0x60>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d10f      	bne.n	80023e4 <translationMounthMarch+0x40>
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <translationMounthMarch+0x64>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <translationMounthMarch+0x40>
      hour = 11;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <translationMounthMarch+0x60>)
 80023d4:	220b      	movs	r2, #11
 80023d6:	701a      	strb	r2, [r3, #0]
      setTime();
 80023d8:	f7ff fc32 	bl	8001c40 <setTime>
      perevedeno = 1;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <translationMounthMarch+0x64>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
    }
    else if(hour > 11) perevedeno = 0;
  }
}
 80023e2:	e006      	b.n	80023f2 <translationMounthMarch+0x4e>
    else if(hour > 11) perevedeno = 0;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <translationMounthMarch+0x60>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b0b      	cmp	r3, #11
 80023ea:	d902      	bls.n	80023f2 <translationMounthMarch+0x4e>
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <translationMounthMarch+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	080072f8 	.word	0x080072f8
 8002400:	200005ab 	.word	0x200005ab
 8002404:	200005a9 	.word	0x200005a9
 8002408:	200005a6 	.word	0x200005a6

0800240c <translationMounthOctober>:

void translationMounthOctober(uint8_t y)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if(date == array_Date_Automatic_Time_Translation[y]){
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <translationMounthOctober+0x58>)
 800241a:	5cd2      	ldrb	r2, [r2, r3]
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <translationMounthOctober+0x5c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d11a      	bne.n	800245a <translationMounthOctober+0x4e>
    if(hour == 11 && !perevedeno){
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <translationMounthOctober+0x60>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b0b      	cmp	r3, #11
 800242a:	d10f      	bne.n	800244c <translationMounthOctober+0x40>
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <translationMounthOctober+0x64>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <translationMounthOctober+0x40>
      hour = 10;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <translationMounthOctober+0x60>)
 800243c:	220a      	movs	r2, #10
 800243e:	701a      	strb	r2, [r3, #0]
      setTime();
 8002440:	f7ff fbfe 	bl	8001c40 <setTime>
      perevedeno = 1;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <translationMounthOctober+0x64>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
    }
    else if(hour > 11) perevedeno = 0;
  } 
}
 800244a:	e006      	b.n	800245a <translationMounthOctober+0x4e>
    else if(hour > 11) perevedeno = 0;
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <translationMounthOctober+0x60>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b0b      	cmp	r3, #11
 8002452:	d902      	bls.n	800245a <translationMounthOctober+0x4e>
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <translationMounthOctober+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	080072f8 	.word	0x080072f8
 8002468:	200005ab 	.word	0x200005ab
 800246c:	200005a9 	.word	0x200005a9
 8002470:	200005a6 	.word	0x200005a6

08002474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_MspInit+0x5c>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_MspInit+0x5c>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6193      	str	r3, [r2, #24]
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_MspInit+0x5c>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_MspInit+0x5c>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_MspInit+0x5c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_MspInit+0x5c>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_MspInit+0x60>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_MspInit+0x60>)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000

080024d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_I2C_MspInit+0x94>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d134      	bne.n	8002562 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_I2C_MspInit+0x98>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_I2C_MspInit+0x98>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_I2C_MspInit+0x98>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002510:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002516:	2312      	movs	r3, #18
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4619      	mov	r1, r3
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <HAL_I2C_MspInit+0x9c>)
 8002526:	f000 fb73 	bl	8002c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_I2C_MspInit+0x98>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_I2C_MspInit+0x98>)
 8002530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_I2C_MspInit+0x98>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2021      	movs	r0, #33	; 0x21
 8002548:	f000 faa9 	bl	8002a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800254c:	2021      	movs	r0, #33	; 0x21
 800254e:	f000 fac2 	bl	8002ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2022      	movs	r0, #34	; 0x22
 8002558:	f000 faa1 	bl	8002a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800255c:	2022      	movs	r0, #34	; 0x22
 800255e:	f000 faba 	bl	8002ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40005800 	.word	0x40005800
 8002570:	40021000 	.word	0x40021000
 8002574:	40010c00 	.word	0x40010c00

08002578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_SPI_MspInit+0x8c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d131      	bne.n	80025fc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_SPI_MspInit+0x90>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_SPI_MspInit+0x90>)
 800259e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_SPI_MspInit+0x90>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_SPI_MspInit+0x90>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <HAL_SPI_MspInit+0x90>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_SPI_MspInit+0x90>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80025cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 0310 	add.w	r3, r7, #16
 80025da:	4619      	mov	r1, r3
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <HAL_SPI_MspInit+0x94>)
 80025de:	f000 fb17 	bl	8002c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4619      	mov	r1, r3
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <HAL_SPI_MspInit+0x94>)
 80025f8:	f000 fb0a 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40003800 	.word	0x40003800
 8002608:	40021000 	.word	0x40021000
 800260c:	40010c00 	.word	0x40010c00

08002610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_TIM_Base_MspInit+0x68>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800262c:	6193      	str	r3, [r2, #24]
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800263a:	e018      	b.n	800266e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d113      	bne.n	800266e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	61d3      	str	r3, [r2, #28]
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	201c      	movs	r0, #28
 8002664:	f000 fa1b 	bl	8002a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002668:	201c      	movs	r0, #28
 800266a:	f000 fa34 	bl	8002ad6 <HAL_NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_TIM_MspPostInit+0x5c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d118      	bne.n	80026d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_TIM_MspPostInit+0x60>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <HAL_TIM_MspPostInit+0x60>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_TIM_MspPostInit+0x60>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 0310 	add.w	r3, r7, #16
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <HAL_TIM_MspPostInit+0x64>)
 80026ce:	f000 fa9f 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010800 	.word	0x40010800

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <HardFault_Handler+0x4>

080026fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <MemManage_Handler+0x4>

08002700 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <BusFault_Handler+0x4>

08002706 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002734:	f000 f8c0 	bl	80028b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM2_IRQHandler+0x10>)
 8002742:	f003 fe29 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200006a4 	.word	0x200006a4

08002750 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <I2C2_EV_IRQHandler+0x10>)
 8002756:	f001 f851 	bl	80037fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000610 	.word	0x20000610

08002764 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <I2C2_ER_IRQHandler+0x10>)
 800276a:	f001 f9ad 	bl	8003ac8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000610 	.word	0x20000610

08002778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <SystemInit+0x5c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <SystemInit+0x5c>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <SystemInit+0x5c>)
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4911      	ldr	r1, [pc, #68]	; (80027d4 <SystemInit+0x5c>)
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <SystemInit+0x60>)
 8002790:	4013      	ands	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <SystemInit+0x5c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <SystemInit+0x5c>)
 800279a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <SystemInit+0x5c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <SystemInit+0x5c>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <SystemInit+0x5c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <SystemInit+0x5c>)
 80027b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SystemInit+0x5c>)
 80027be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SystemInit+0x64>)
 80027c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	f8ff0000 	.word	0xf8ff0000
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027e2:	e003      	b.n	80027ec <LoopCopyDataInit>

080027e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027ea:	3104      	adds	r1, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027f4:	d3f6      	bcc.n	80027e4 <CopyDataInit>
  ldr r2, =_sbss
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027f8:	e002      	b.n	8002800 <LoopFillZerobss>

080027fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027fc:	f842 3b04 	str.w	r3, [r2], #4

08002800 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002802:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002804:	d3f9      	bcc.n	80027fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002806:	f7ff ffb7 	bl	8002778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280a:	f004 fbbb 	bl	8006f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800280e:	f7fd ff99 	bl	8000744 <main>
  bx lr
 8002812:	4770      	bx	lr
  ldr r3, =_sidata
 8002814:	0800732c 	.word	0x0800732c
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800281c:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8002820:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8002824:	20000710 	.word	0x20000710

08002828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <ADC1_2_IRQHandler>
	...

0800282c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_Init+0x28>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_Init+0x28>)
 8002836:	f043 0310 	orr.w	r3, r3, #16
 800283a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283c:	2003      	movs	r0, #3
 800283e:	f000 f923 	bl	8002a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002842:	2000      	movs	r0, #0
 8002844:	f000 f808 	bl	8002858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002848:	f7ff fe14 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40022000 	.word	0x40022000

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_InitTick+0x54>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_InitTick+0x58>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f93b 	bl	8002af2 <HAL_SYSTICK_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00e      	b.n	80028a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d80a      	bhi.n	80028a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288c:	2200      	movs	r2, #0
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f000 f903 	bl	8002a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002898:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <HAL_InitTick+0x5c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	20000014 	.word	0x20000014
 80028b4:	20000010 	.word	0x20000010

080028b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_IncTick+0x1c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_IncTick+0x20>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_IncTick+0x20>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000014 	.word	0x20000014
 80028d8:	2000070c 	.word	0x2000070c

080028dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b02      	ldr	r3, [pc, #8]	; (80028ec <HAL_GetTick+0x10>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	2000070c 	.word	0x2000070c

080028f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <__NVIC_GetPriorityGrouping+0x18>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0307 	and.w	r3, r3, #7
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db0b      	blt.n	800297e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4906      	ldr	r1, [pc, #24]	; (8002988 <__NVIC_EnableIRQ+0x34>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2001      	movs	r0, #1
 8002976:	fa00 f202 	lsl.w	r2, r0, r2
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	e000e100 	.word	0xe000e100

0800298c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	db0a      	blt.n	80029b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	490c      	ldr	r1, [pc, #48]	; (80029d8 <__NVIC_SetPriority+0x4c>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	440b      	add	r3, r1
 80029b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b4:	e00a      	b.n	80029cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4908      	ldr	r1, [pc, #32]	; (80029dc <__NVIC_SetPriority+0x50>)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3b04      	subs	r3, #4
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	440b      	add	r3, r1
 80029ca:	761a      	strb	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f1c3 0307 	rsb	r3, r3, #7
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	bf28      	it	cs
 80029fe:	2304      	movcs	r3, #4
 8002a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d902      	bls.n	8002a10 <NVIC_EncodePriority+0x30>
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3b03      	subs	r3, #3
 8002a0e:	e000      	b.n	8002a12 <NVIC_EncodePriority+0x32>
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	4313      	orrs	r3, r2
         );
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a54:	d301      	bcc.n	8002a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00f      	b.n	8002a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <SysTick_Config+0x40>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a62:	210f      	movs	r1, #15
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	f7ff ff90 	bl	800298c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <SysTick_Config+0x40>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <SysTick_Config+0x40>)
 8002a74:	2207      	movs	r2, #7
 8002a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	e000e010 	.word	0xe000e010

08002a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff2d 	bl	80028f0 <__NVIC_SetPriorityGrouping>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab0:	f7ff ff42 	bl	8002938 <__NVIC_GetPriorityGrouping>
 8002ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f7ff ff90 	bl	80029e0 <NVIC_EncodePriority>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff5f 	bl	800298c <__NVIC_SetPriority>
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff35 	bl	8002954 <__NVIC_EnableIRQ>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ffa2 	bl	8002a44 <SysTick_Config>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d005      	beq.n	8002b2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2204      	movs	r2, #4
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e051      	b.n	8002bd2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 020e 	bic.w	r2, r2, #14
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_DMA_Abort_IT+0xd0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d029      	beq.n	8002bac <HAL_DMA_Abort_IT+0xa0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <HAL_DMA_Abort_IT+0xd4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x9c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_DMA_Abort_IT+0xd8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d01a      	beq.n	8002ba2 <HAL_DMA_Abort_IT+0x96>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_DMA_Abort_IT+0xdc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d012      	beq.n	8002b9c <HAL_DMA_Abort_IT+0x90>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <HAL_DMA_Abort_IT+0xe0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00a      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x8a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_DMA_Abort_IT+0xe4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d102      	bne.n	8002b90 <HAL_DMA_Abort_IT+0x84>
 8002b8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b8e:	e00e      	b.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b94:	e00b      	b.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b9a:	e008      	b.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba0:	e005      	b.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba6:	e002      	b.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002ba8:	2310      	movs	r3, #16
 8002baa:	e000      	b.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002bac:	2301      	movs	r3, #1
 8002bae:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <HAL_DMA_Abort_IT+0xe8>)
 8002bb0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
    } 
  }
  return status;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40020008 	.word	0x40020008
 8002be0:	4002001c 	.word	0x4002001c
 8002be4:	40020030 	.word	0x40020030
 8002be8:	40020044 	.word	0x40020044
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	4002006c 	.word	0x4002006c
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b08b      	sub	sp, #44	; 0x2c
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c22:	e127      	b.n	8002e74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c24:	2201      	movs	r2, #1
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f040 8116 	bne.w	8002e6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d034      	beq.n	8002cb4 <HAL_GPIO_Init+0xa4>
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d80d      	bhi.n	8002c6a <HAL_GPIO_Init+0x5a>
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d02b      	beq.n	8002caa <HAL_GPIO_Init+0x9a>
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d804      	bhi.n	8002c60 <HAL_GPIO_Init+0x50>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d031      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d01c      	beq.n	8002c98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c5e:	e048      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d043      	beq.n	8002cec <HAL_GPIO_Init+0xdc>
 8002c64:	2b11      	cmp	r3, #17
 8002c66:	d01b      	beq.n	8002ca0 <HAL_GPIO_Init+0x90>
          break;
 8002c68:	e043      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c6a:	4a89      	ldr	r2, [pc, #548]	; (8002e90 <HAL_GPIO_Init+0x280>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d026      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
 8002c70:	4a87      	ldr	r2, [pc, #540]	; (8002e90 <HAL_GPIO_Init+0x280>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d806      	bhi.n	8002c84 <HAL_GPIO_Init+0x74>
 8002c76:	4a87      	ldr	r2, [pc, #540]	; (8002e94 <HAL_GPIO_Init+0x284>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d020      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
 8002c7c:	4a86      	ldr	r2, [pc, #536]	; (8002e98 <HAL_GPIO_Init+0x288>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
          break;
 8002c82:	e036      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c84:	4a85      	ldr	r2, [pc, #532]	; (8002e9c <HAL_GPIO_Init+0x28c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
 8002c8a:	4a85      	ldr	r2, [pc, #532]	; (8002ea0 <HAL_GPIO_Init+0x290>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d016      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
 8002c90:	4a84      	ldr	r2, [pc, #528]	; (8002ea4 <HAL_GPIO_Init+0x294>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0xae>
          break;
 8002c96:	e02c      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	623b      	str	r3, [r7, #32]
          break;
 8002c9e:	e028      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	623b      	str	r3, [r7, #32]
          break;
 8002ca8:	e023      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	623b      	str	r3, [r7, #32]
          break;
 8002cb2:	e01e      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	623b      	str	r3, [r7, #32]
          break;
 8002cbc:	e019      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	623b      	str	r3, [r7, #32]
          break;
 8002cca:	e012      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	611a      	str	r2, [r3, #16]
          break;
 8002cde:	e008      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	615a      	str	r2, [r3, #20]
          break;
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cec:	2300      	movs	r3, #0
 8002cee:	623b      	str	r3, [r7, #32]
          break;
 8002cf0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2bff      	cmp	r3, #255	; 0xff
 8002cf6:	d801      	bhi.n	8002cfc <HAL_GPIO_Init+0xec>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	e001      	b.n	8002d00 <HAL_GPIO_Init+0xf0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2bff      	cmp	r3, #255	; 0xff
 8002d06:	d802      	bhi.n	8002d0e <HAL_GPIO_Init+0xfe>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x104>
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	3b08      	subs	r3, #8
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	401a      	ands	r2, r3
 8002d26:	6a39      	ldr	r1, [r7, #32]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8096 	beq.w	8002e6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_GPIO_Init+0x298>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_GPIO_Init+0x298>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6193      	str	r3, [r2, #24]
 8002d4e:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <HAL_GPIO_Init+0x298>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d5a:	4a54      	ldr	r2, [pc, #336]	; (8002eac <HAL_GPIO_Init+0x29c>)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x2a0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x19e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_GPIO_Init+0x2a4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x19a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	; (8002eb8 <HAL_GPIO_Init+0x2a8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x196>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a48      	ldr	r2, [pc, #288]	; (8002ebc <HAL_GPIO_Init+0x2ac>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x192>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x1a0>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e004      	b.n	8002db0 <HAL_GPIO_Init+0x1a0>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_Init+0x1a0>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_GPIO_Init+0x1a0>
 8002dae:	2300      	movs	r3, #0
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4093      	lsls	r3, r2
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dc0:	493a      	ldr	r1, [pc, #232]	; (8002eac <HAL_GPIO_Init+0x29c>)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4938      	ldr	r1, [pc, #224]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
 8002de6:	e006      	b.n	8002df6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4933      	ldr	r1, [pc, #204]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	492e      	ldr	r1, [pc, #184]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
 8002e0e:	e006      	b.n	8002e1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	4929      	ldr	r1, [pc, #164]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	4924      	ldr	r1, [pc, #144]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
 8002e36:	e006      	b.n	8002e46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	491f      	ldr	r1, [pc, #124]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	491a      	ldr	r1, [pc, #104]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]
 8002e5e:	e006      	b.n	8002e6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	4915      	ldr	r1, [pc, #84]	; (8002ec0 <HAL_GPIO_Init+0x2b0>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f aed0 	bne.w	8002c24 <HAL_GPIO_Init+0x14>
  }
}
 8002e84:	bf00      	nop
 8002e86:	372c      	adds	r7, #44	; 0x2c
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	10210000 	.word	0x10210000
 8002e94:	10110000 	.word	0x10110000
 8002e98:	10120000 	.word	0x10120000
 8002e9c:	10310000 	.word	0x10310000
 8002ea0:	10320000 	.word	0x10320000
 8002ea4:	10220000 	.word	0x10220000
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40010800 	.word	0x40010800
 8002eb4:	40010c00 	.word	0x40010c00
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e001      	b.n	8002ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]
 8002efe:	4613      	mov	r3, r2
 8002f00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f02:	787b      	ldrb	r3, [r7, #1]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f0e:	e003      	b.n	8002f18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	041a      	lsls	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	611a      	str	r2, [r3, #16]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	611a      	str	r2, [r3, #16]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e10f      	b.n	8003186 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff faac 	bl	80024d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	; 0x24
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f98:	f002 fefa 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8002f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a7b      	ldr	r2, [pc, #492]	; (8003190 <HAL_I2C_Init+0x23c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d807      	bhi.n	8002fb8 <HAL_I2C_Init+0x64>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a7a      	ldr	r2, [pc, #488]	; (8003194 <HAL_I2C_Init+0x240>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	bf94      	ite	ls
 8002fb0:	2301      	movls	r3, #1
 8002fb2:	2300      	movhi	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e006      	b.n	8002fc6 <HAL_I2C_Init+0x72>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a77      	ldr	r2, [pc, #476]	; (8003198 <HAL_I2C_Init+0x244>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	bf94      	ite	ls
 8002fc0:	2301      	movls	r3, #1
 8002fc2:	2300      	movhi	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0db      	b.n	8003186 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a72      	ldr	r2, [pc, #456]	; (800319c <HAL_I2C_Init+0x248>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	0c9b      	lsrs	r3, r3, #18
 8002fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a64      	ldr	r2, [pc, #400]	; (8003190 <HAL_I2C_Init+0x23c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d802      	bhi.n	8003008 <HAL_I2C_Init+0xb4>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3301      	adds	r3, #1
 8003006:	e009      	b.n	800301c <HAL_I2C_Init+0xc8>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a63      	ldr	r2, [pc, #396]	; (80031a0 <HAL_I2C_Init+0x24c>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	3301      	adds	r3, #1
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800302e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4956      	ldr	r1, [pc, #344]	; (8003190 <HAL_I2C_Init+0x23c>)
 8003038:	428b      	cmp	r3, r1
 800303a:	d80d      	bhi.n	8003058 <HAL_I2C_Init+0x104>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e59      	subs	r1, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fbb1 f3f3 	udiv	r3, r1, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b04      	cmp	r3, #4
 8003052:	bf38      	it	cc
 8003054:	2304      	movcc	r3, #4
 8003056:	e04f      	b.n	80030f8 <HAL_I2C_Init+0x1a4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d111      	bne.n	8003084 <HAL_I2C_Init+0x130>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e012      	b.n	80030aa <HAL_I2C_Init+0x156>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	0099      	lsls	r1, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Init+0x15e>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e022      	b.n	80030f8 <HAL_I2C_Init+0x1a4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10e      	bne.n	80030d8 <HAL_I2C_Init+0x184>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e58      	subs	r0, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	440b      	add	r3, r1
 80030c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	e00f      	b.n	80030f8 <HAL_I2C_Init+0x1a4>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e58      	subs	r0, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	0099      	lsls	r1, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6809      	ldr	r1, [r1, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6911      	ldr	r1, [r2, #16]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	430b      	orrs	r3, r1
 800313a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	000186a0 	.word	0x000186a0
 8003194:	001e847f 	.word	0x001e847f
 8003198:	003d08ff 	.word	0x003d08ff
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	10624dd3 	.word	0x10624dd3

080031a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	460b      	mov	r3, r1
 80031b2:	817b      	strh	r3, [r7, #10]
 80031b4:	4613      	mov	r3, r2
 80031b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff fb90 	bl	80028dc <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	f040 80e0 	bne.w	800338c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2319      	movs	r3, #25
 80031d2:	2201      	movs	r2, #1
 80031d4:	4970      	ldr	r1, [pc, #448]	; (8003398 <HAL_I2C_Master_Transmit+0x1f4>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f002 f80d 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	e0d3      	b.n	800338e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_I2C_Master_Transmit+0x50>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e0cc      	b.n	800338e <HAL_I2C_Master_Transmit+0x1ea>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d007      	beq.n	800321a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2221      	movs	r2, #33	; 0x21
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2210      	movs	r2, #16
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_I2C_Master_Transmit+0x1f8>)
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	6a3a      	ldr	r2, [r7, #32]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f001 fe2c 	bl	8004ec0 <I2C_MasterRequestWrite>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e08d      	b.n	800338e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003288:	e066      	b.n	8003358 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f002 f887 	bl	80053a2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d107      	bne.n	80032b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d11b      	bne.n	800332c <HAL_I2C_Master_Transmit+0x188>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	6a39      	ldr	r1, [r7, #32]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f002 f877 	bl	8005424 <I2C_WaitOnBTFFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	2b04      	cmp	r3, #4
 8003342:	d107      	bne.n	8003354 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e01a      	b.n	800338e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	d194      	bne.n	800328a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	00100002 	.word	0x00100002
 800339c:	ffff0000 	.word	0xffff0000

080033a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	461a      	mov	r2, r3
 80033ac:	460b      	mov	r3, r1
 80033ae:	817b      	strh	r3, [r7, #10]
 80033b0:	4613      	mov	r3, r2
 80033b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff fa92 	bl	80028dc <HAL_GetTick>
 80033b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	f040 8213 	bne.w	80037ee <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2319      	movs	r3, #25
 80033ce:	2201      	movs	r2, #1
 80033d0:	497e      	ldr	r1, [pc, #504]	; (80035cc <HAL_I2C_Master_Receive+0x22c>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 ff0f 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	e206      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2C_Master_Receive+0x50>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e1ff      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d007      	beq.n	8003416 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2222      	movs	r2, #34	; 0x22
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2210      	movs	r2, #16
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	893a      	ldrh	r2, [r7, #8]
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_I2C_Master_Receive+0x230>)
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f001 fda4 	bl	8004fac <I2C_MasterRequestRead>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e1c0      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d113      	bne.n	800349e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e194      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d11d      	bne.n	80034e2 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034b6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034de:	b662      	cpsie	i
 80034e0:	e172      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d11d      	bne.n	8003526 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034fa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003520:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003522:	b662      	cpsie	i
 8003524:	e150      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800354c:	e13c      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	2b03      	cmp	r3, #3
 8003554:	f200 80f5 	bhi.w	8003742 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	2b01      	cmp	r3, #1
 800355e:	d123      	bne.n	80035a8 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f001 ff9e 	bl	80054a6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e13d      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a6:	e10f      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d150      	bne.n	8003652 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2200      	movs	r2, #0
 80035b8:	4906      	ldr	r1, [pc, #24]	; (80035d4 <HAL_I2C_Master_Receive+0x234>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f001 fe1b 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e112      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
 80035ca:	bf00      	nop
 80035cc:	00100002 	.word	0x00100002
 80035d0:	ffff0000 	.word	0xffff0000
 80035d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800361c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e0ba      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	4967      	ldr	r1, [pc, #412]	; (80037f8 <HAL_I2C_Master_Receive+0x458>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f001 fdca 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0c1      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	2200      	movs	r2, #0
 80036b8:	494f      	ldr	r1, [pc, #316]	; (80037f8 <HAL_I2C_Master_Receive+0x458>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f001 fd9b 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e092      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800370c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003740:	e042      	b.n	80037c8 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f001 fead 	bl	80054a6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e04c      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d118      	bne.n	80037c8 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f47f aebe 	bne.w	800354e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	00010004 	.word	0x00010004

080037fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b10      	cmp	r3, #16
 800382a:	d003      	beq.n	8003834 <HAL_I2C_EV_IRQHandler+0x38>
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	f040 80b6 	bne.w	80039a0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <HAL_I2C_EV_IRQHandler+0x6e>
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003854:	d003      	beq.n	800385e <HAL_I2C_EV_IRQHandler+0x62>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800385c:	d101      	bne.n	8003862 <HAL_I2C_EV_IRQHandler+0x66>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x68>
 8003862:	2300      	movs	r3, #0
 8003864:	2b01      	cmp	r3, #1
 8003866:	f000 8127 	beq.w	8003ab8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <HAL_I2C_EV_IRQHandler+0x92>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	0a5b      	lsrs	r3, r3, #9
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d006      	beq.n	800388e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 fe94 	bl	80055ae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fd1b 	bl	80042c2 <I2C_Master_SB>
 800388c:	e087      	b.n	800399e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_I2C_EV_IRQHandler+0xb2>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	0a5b      	lsrs	r3, r3, #9
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fd90 	bl	80043cc <I2C_Master_ADD10>
 80038ac:	e077      	b.n	800399e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0xd2>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	0a5b      	lsrs	r3, r3, #9
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fda9 	bl	800441e <I2C_Master_ADDR>
 80038cc:	e067      	b.n	800399e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d030      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e8:	f000 80e8 	beq.w	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	09db      	lsrs	r3, r3, #7
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00f      	beq.n	8003918 <HAL_I2C_EV_IRQHandler+0x11c>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	0a9b      	lsrs	r3, r3, #10
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <HAL_I2C_EV_IRQHandler+0x11c>
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f9fc 	bl	8003d0e <I2C_MasterTransmit_TXE>
 8003916:	e042      	b.n	800399e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80cb 	beq.w	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	0a5b      	lsrs	r3, r3, #9
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80c4 	beq.w	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fae2 	bl	8003efe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800393a:	e0bf      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394a:	f000 80b7 	beq.w	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <HAL_I2C_EV_IRQHandler+0x17e>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	0a9b      	lsrs	r3, r3, #10
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_I2C_EV_IRQHandler+0x17e>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb39 	bl	8003fea <I2C_MasterReceive_RXNE>
 8003978:	e011      	b.n	800399e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809a 	beq.w	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	0a5b      	lsrs	r3, r3, #9
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8093 	beq.w	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fba9 	bl	80040ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800399c:	e08e      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
 800399e:	e08d      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e007      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1f8>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	0a5b      	lsrs	r3, r3, #9
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 ff6d 	bl	80048cc <I2C_Slave_ADDR>
 80039f2:	e066      	b.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_I2C_EV_IRQHandler+0x218>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	0a5b      	lsrs	r3, r3, #9
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 ffa1 	bl	8004954 <I2C_Slave_STOPF>
 8003a12:	e056      	b.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	2b21      	cmp	r3, #33	; 0x21
 8003a18:	d002      	beq.n	8003a20 <HAL_I2C_EV_IRQHandler+0x224>
 8003a1a:	7bbb      	ldrb	r3, [r7, #14]
 8003a1c:	2b29      	cmp	r3, #41	; 0x29
 8003a1e:	d125      	bne.n	8003a6c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	09db      	lsrs	r3, r3, #7
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00f      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0x250>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0x250>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fe85 	bl	8004754 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a4a:	e039      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d033      	beq.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	0a5b      	lsrs	r3, r3, #9
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02d      	beq.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 feb2 	bl	80047ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a6a:	e029      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	099b      	lsrs	r3, r3, #6
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <HAL_I2C_EV_IRQHandler+0x29c>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_I2C_EV_IRQHandler+0x29c>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 febc 	bl	800480e <I2C_SlaveReceive_RXNE>
 8003a96:	e014      	b.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	0a5b      	lsrs	r3, r3, #9
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 feea 	bl	800488a <I2C_SlaveReceive_BTF>
 8003ab6:	e004      	b.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003ab8:	bf00      	nop
 8003aba:	e002      	b.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_I2C_ER_IRQHandler+0x56>
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b0c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	0a5b      	lsrs	r3, r3, #9
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <HAL_I2C_ER_IRQHandler+0x80>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003b46:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d041      	beq.n	8003bd8 <HAL_I2C_ER_IRQHandler+0x110>
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d03b      	beq.n	8003bd8 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b76:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d112      	bne.n	8003baa <HAL_I2C_ER_IRQHandler+0xe2>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_I2C_ER_IRQHandler+0xe2>
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b21      	cmp	r3, #33	; 0x21
 8003b8e:	d008      	beq.n	8003ba2 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	2b29      	cmp	r3, #41	; 0x29
 8003b94:	d005      	beq.n	8003ba2 <HAL_I2C_ER_IRQHandler+0xda>
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b28      	cmp	r3, #40	; 0x28
 8003b9a:	d106      	bne.n	8003baa <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b21      	cmp	r3, #33	; 0x21
 8003ba0:	d103      	bne.n	8003baa <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f001 f806 	bl	8004bb4 <I2C_Slave_AF>
 8003ba8:	e016      	b.n	8003bd8 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bb2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d107      	bne.n	8003bd8 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <HAL_I2C_ER_IRQHandler+0x13a>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003c00:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 f83d 	bl	8004c94 <I2C_ITError>
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3728      	adds	r7, #40	; 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr

08003c6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
 8003c76:	4613      	mov	r3, r2
 8003c78:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d24:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d150      	bne.n	8003dd6 <I2C_MasterTransmit_TXE+0xc8>
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b21      	cmp	r3, #33	; 0x21
 8003d38:	d14d      	bne.n	8003dd6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d01d      	beq.n	8003d7c <I2C_MasterTransmit_TXE+0x6e>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d01a      	beq.n	8003d7c <I2C_MasterTransmit_TXE+0x6e>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d4c:	d016      	beq.n	8003d7c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2211      	movs	r2, #17
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff54 	bl	8003c22 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d7a:	e0bc      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d8a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d107      	bne.n	8003dc6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff69 	bl	8003c96 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc4:	e097      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff27 	bl	8003c22 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dd4:	e08f      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b21      	cmp	r3, #33	; 0x21
 8003dda:	d007      	beq.n	8003dec <I2C_MasterTransmit_TXE+0xde>
 8003ddc:	7bbb      	ldrb	r3, [r7, #14]
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	f040 8089 	bne.w	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b22      	cmp	r3, #34	; 0x22
 8003de8:	f040 8085 	bne.w	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e06:	e076      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d15d      	bne.n	8003ed0 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11d      	bne.n	8003e58 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d10b      	bne.n	8003e3c <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e3a:	e05c      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	121b      	asrs	r3, r3, #8
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e56:	e04e      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10b      	bne.n	8003e78 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e76:	e03e      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d13a      	bne.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b22      	cmp	r3, #34	; 0x22
 8003e8a:	d108      	bne.n	8003e9e <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	e02b      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b21      	cmp	r3, #33	; 0x21
 8003ea8:	d125      	bne.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ece:	e012      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ef4:	e7ff      	b.n	8003ef6 <I2C_MasterTransmit_TXE+0x1e8>
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b21      	cmp	r3, #33	; 0x21
 8003f16:	d164      	bne.n	8003fe2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d012      	beq.n	8003f48 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8003f46:	e04c      	b.n	8003fe2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d01d      	beq.n	8003f8a <I2C_MasterTransmit_BTF+0x8c>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d01a      	beq.n	8003f8a <I2C_MasterTransmit_BTF+0x8c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f5a:	d016      	beq.n	8003f8a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2211      	movs	r2, #17
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fe4d 	bl	8003c22 <HAL_I2C_MasterTxCpltCallback>
}
 8003f88:	e02b      	b.n	8003fe2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f98:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d107      	bne.n	8003fd4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fe62 	bl	8003c96 <HAL_I2C_MemTxCpltCallback>
}
 8003fd2:	e006      	b.n	8003fe2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fe20 	bl	8003c22 <HAL_I2C_MasterTxCpltCallback>
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b22      	cmp	r3, #34	; 0x22
 8003ffc:	d173      	bne.n	80040e6 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d920      	bls.n	800404e <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b03      	cmp	r3, #3
 800403a:	d154      	bne.n	80040e6 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800404c:	e04b      	b.n	80040e6 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	2b02      	cmp	r3, #2
 8004054:	d047      	beq.n	80040e6 <I2C_MasterReceive_RXNE+0xfc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d002      	beq.n	8004062 <I2C_MasterReceive_RXNE+0x78>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d141      	bne.n	80040e6 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004080:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d10a      	bne.n	80040d2 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fdec 	bl	8003ca8 <HAL_I2C_MemRxCpltCallback>
}
 80040d0:	e009      	b.n	80040e6 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2212      	movs	r2, #18
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fda7 	bl	8003c34 <HAL_I2C_MasterRxCpltCallback>
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b04      	cmp	r3, #4
 8004104:	d11b      	bne.n	800413e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004114:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800413c:	e0bd      	b.n	80042ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b03      	cmp	r3, #3
 8004146:	d129      	bne.n	800419c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004156:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b04      	cmp	r3, #4
 800415c:	d00a      	beq.n	8004174 <I2C_MasterReceive_BTF+0x86>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d007      	beq.n	8004174 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800419a:	e08e      	b.n	80042ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d176      	bne.n	8004294 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d002      	beq.n	80041b2 <I2C_MasterReceive_BTF+0xc4>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d108      	bne.n	80041c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e019      	b.n	80041f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d002      	beq.n	80041d0 <I2C_MasterReceive_BTF+0xe2>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d108      	bne.n	80041e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e00a      	b.n	80041f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d007      	beq.n	80041f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004252:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d10a      	bne.n	800427e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fd16 	bl	8003ca8 <HAL_I2C_MemRxCpltCallback>
}
 800427c:	e01d      	b.n	80042ba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2212      	movs	r2, #18
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fcd1 	bl	8003c34 <HAL_I2C_MasterRxCpltCallback>
}
 8004292:	e012      	b.n	80042ba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d117      	bne.n	8004306 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80042f0:	e067      	b.n	80043c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	611a      	str	r2, [r3, #16]
}
 8004304:	e05d      	b.n	80043c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430e:	d133      	bne.n	8004378 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b21      	cmp	r3, #33	; 0x21
 800431a:	d109      	bne.n	8004330 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	e008      	b.n	8004342 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <I2C_Master_SB+0x90>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d037      	beq.n	80043c2 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <I2C_Master_SB+0xa4>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02d      	beq.n	80043c2 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004374:	605a      	str	r2, [r3, #4]
}
 8004376:	e024      	b.n	80043c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10e      	bne.n	800439e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	b29b      	uxth	r3, r3
 8004386:	11db      	asrs	r3, r3, #7
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f063 030f 	orn	r3, r3, #15
 8004394:	b2da      	uxtb	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
}
 800439c:	e011      	b.n	80043c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10d      	bne.n	80043c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	11db      	asrs	r3, r3, #7
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 0306 	and.w	r3, r3, #6
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f063 030e 	orn	r3, r3, #14
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <I2C_Master_ADD10+0x24>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d011      	beq.n	8004414 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <I2C_Master_ADD10+0x38>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004412:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b091      	sub	sp, #68	; 0x44
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b22      	cmp	r3, #34	; 0x22
 8004446:	f040 8174 	bne.w	8004732 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <I2C_Master_ADDR+0x54>
 8004452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d10b      	bne.n	8004472 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	633b      	str	r3, [r7, #48]	; 0x30
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	e16b      	b.n	800474a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d11d      	bne.n	80044b6 <I2C_Master_ADDR+0x98>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004482:	d118      	bne.n	80044b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	651a      	str	r2, [r3, #80]	; 0x50
 80044b4:	e149      	b.n	800474a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c0:	2300      	movs	r3, #0
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e120      	b.n	800472a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f040 808a 	bne.w	8004608 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044fa:	d137      	bne.n	800456c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451a:	d113      	bne.n	8004544 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	e0f2      	b.n	800472a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e0de      	b.n	800472a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	2b08      	cmp	r3, #8
 8004570:	d02e      	beq.n	80045d0 <I2C_Master_ADDR+0x1b2>
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	2b20      	cmp	r3, #32
 8004576:	d02b      	beq.n	80045d0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	2b12      	cmp	r3, #18
 800457c:	d102      	bne.n	8004584 <I2C_Master_ADDR+0x166>
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	2b01      	cmp	r3, #1
 8004582:	d125      	bne.n	80045d0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004586:	2b04      	cmp	r3, #4
 8004588:	d00e      	beq.n	80045a8 <I2C_Master_ADDR+0x18a>
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	2b02      	cmp	r3, #2
 800458e:	d00b      	beq.n	80045a8 <I2C_Master_ADDR+0x18a>
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	2b10      	cmp	r3, #16
 8004594:	d008      	beq.n	80045a8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e007      	b.n	80045b8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	e0ac      	b.n	800472a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e090      	b.n	800472a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d158      	bne.n	80046c4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	2b04      	cmp	r3, #4
 8004616:	d021      	beq.n	800465c <I2C_Master_ADDR+0x23e>
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	2b02      	cmp	r3, #2
 800461c:	d01e      	beq.n	800465c <I2C_Master_ADDR+0x23e>
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b10      	cmp	r3, #16
 8004622:	d01b      	beq.n	800465c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004632:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e012      	b.n	8004682 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800466a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004690:	d14b      	bne.n	800472a <I2C_Master_ADDR+0x30c>
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004698:	d00b      	beq.n	80046b2 <I2C_Master_ADDR+0x294>
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	2b01      	cmp	r3, #1
 800469e:	d008      	beq.n	80046b2 <I2C_Master_ADDR+0x294>
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d005      	beq.n	80046b2 <I2C_Master_ADDR+0x294>
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d002      	beq.n	80046b2 <I2C_Master_ADDR+0x294>
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d13b      	bne.n	800472a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	e032      	b.n	800472a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e2:	d117      	bne.n	8004714 <I2C_Master_ADDR+0x2f6>
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ea:	d00b      	beq.n	8004704 <I2C_Master_ADDR+0x2e6>
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d008      	beq.n	8004704 <I2C_Master_ADDR+0x2e6>
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d005      	beq.n	8004704 <I2C_Master_ADDR+0x2e6>
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d002      	beq.n	8004704 <I2C_Master_ADDR+0x2e6>
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	2b20      	cmp	r3, #32
 8004702:	d107      	bne.n	8004714 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004712:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004730:	e00b      	b.n	800474a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
}
 8004748:	e7ff      	b.n	800474a <I2C_Master_ADDR+0x32c>
 800474a:	bf00      	nop
 800474c:	3744      	adds	r7, #68	; 0x44
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004762:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02b      	beq.n	80047c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	781a      	ldrb	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d114      	bne.n	80047c6 <I2C_SlaveTransmit_TXE+0x72>
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b29      	cmp	r3, #41	; 0x29
 80047a0:	d111      	bne.n	80047c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2228      	movs	r2, #40	; 0x28
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fa40 	bl	8003c46 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d011      	beq.n	8004804 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02c      	beq.n	8004882 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d114      	bne.n	8004882 <I2C_SlaveReceive_RXNE+0x74>
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b2a      	cmp	r3, #42	; 0x2a
 800485c:	d111      	bne.n	8004882 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2222      	movs	r2, #34	; 0x22
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2228      	movs	r2, #40	; 0x28
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff f9eb 	bl	8003c58 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d012      	beq.n	80048c2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048e6:	2b28      	cmp	r3, #40	; 0x28
 80048e8:	d127      	bne.n	800493a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	09db      	lsrs	r3, r3, #7
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	81bb      	strh	r3, [r7, #12]
 800491c:	e002      	b.n	8004924 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800492c:	89ba      	ldrh	r2, [r7, #12]
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff f999 	bl	8003c6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004938:	e008      	b.n	800494c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0202 	mvn.w	r2, #2
 8004942:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004972:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d172      	bne.n	8004a98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b22      	cmp	r3, #34	; 0x22
 80049b6:	d002      	beq.n	80049be <I2C_Slave_STOPF+0x6a>
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b2a      	cmp	r3, #42	; 0x2a
 80049bc:	d135      	bne.n	8004a2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe f8fe 	bl	8002bf8 <HAL_DMA_GetState>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d049      	beq.n	8004a96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	4a69      	ldr	r2, [pc, #420]	; (8004bac <I2C_Slave_STOPF+0x258>)
 8004a08:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe f87c 	bl	8002b0c <HAL_DMA_Abort_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d03d      	beq.n	8004a96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a28:	e035      	b.n	8004a96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe f8c8 	bl	8002bf8 <HAL_DMA_GetState>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d014      	beq.n	8004a98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	4a4e      	ldr	r2, [pc, #312]	; (8004bac <I2C_Slave_STOPF+0x258>)
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f846 	bl	8002b0c <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
 8004a94:	e000      	b.n	8004a98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d03e      	beq.n	8004b20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d112      	bne.n	8004ad6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d112      	bne.n	8004b0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f043 0204 	orr.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8b3 	bl	8004c94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b2e:	e039      	b.n	8004ba4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b2a      	cmp	r3, #42	; 0x2a
 8004b34:	d109      	bne.n	8004b4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2228      	movs	r2, #40	; 0x28
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff f887 	bl	8003c58 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b28      	cmp	r3, #40	; 0x28
 8004b54:	d111      	bne.n	8004b7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <I2C_Slave_STOPF+0x25c>)
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff f886 	bl	8003c84 <HAL_I2C_ListenCpltCallback>
}
 8004b78:	e014      	b.n	8004ba4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	2b22      	cmp	r3, #34	; 0x22
 8004b80:	d002      	beq.n	8004b88 <I2C_Slave_STOPF+0x234>
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b22      	cmp	r3, #34	; 0x22
 8004b86:	d10d      	bne.n	8004ba4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff f85a 	bl	8003c58 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08005119 	.word	0x08005119
 8004bb0:	ffff0000 	.word	0xffff0000

08004bb4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d002      	beq.n	8004bd6 <I2C_Slave_AF+0x22>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d129      	bne.n	8004c2a <I2C_Slave_AF+0x76>
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b28      	cmp	r3, #40	; 0x28
 8004bda:	d126      	bne.n	8004c2a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <I2C_Slave_AF+0xdc>)
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bfa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff f82e 	bl	8003c84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c28:	e02e      	b.n	8004c88 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	2b21      	cmp	r3, #33	; 0x21
 8004c2e:	d126      	bne.n	8004c7e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <I2C_Slave_AF+0xdc>)
 8004c34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2221      	movs	r2, #33	; 0x21
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fe ffe5 	bl	8003c46 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c7c:	e004      	b.n	8004c88 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c86:	615a      	str	r2, [r3, #20]
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	ffff0000 	.word	0xffff0000

08004c94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d10a      	bne.n	8004cc6 <I2C_ITError+0x32>
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b22      	cmp	r3, #34	; 0x22
 8004cb4:	d107      	bne.n	8004cc6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ccc:	2b28      	cmp	r3, #40	; 0x28
 8004cce:	d107      	bne.n	8004ce0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2228      	movs	r2, #40	; 0x28
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cde:	e015      	b.n	8004d0c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cee:	d006      	beq.n	8004cfe <I2C_ITError+0x6a>
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b60      	cmp	r3, #96	; 0x60
 8004cf4:	d003      	beq.n	8004cfe <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d161      	bne.n	8004de0 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d020      	beq.n	8004d7a <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	4a5e      	ldr	r2, [pc, #376]	; (8004eb8 <I2C_ITError+0x224>)
 8004d3e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd fee1 	bl	8002b0c <HAL_DMA_Abort_IT>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8089 	beq.w	8004e64 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
 8004d78:	e074      	b.n	8004e64 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	4a4e      	ldr	r2, [pc, #312]	; (8004eb8 <I2C_ITError+0x224>)
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd fec0 	bl	8002b0c <HAL_DMA_Abort_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d068      	beq.n	8004e64 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d10b      	bne.n	8004db8 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4798      	blx	r3
 8004dde:	e041      	b.n	8004e64 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d125      	bne.n	8004e38 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d10b      	bne.n	8004e20 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fe ff4b 	bl	8003ccc <HAL_I2C_AbortCpltCallback>
 8004e36:	e015      	b.n	8004e64 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d10b      	bne.n	8004e5e <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fe ff2b 	bl	8003cba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d11b      	bne.n	8004eb0 <I2C_ITError+0x21c>
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b28      	cmp	r3, #40	; 0x28
 8004e7c:	d118      	bne.n	8004eb0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e8c:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <I2C_ITError+0x228>)
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fe feea 	bl	8003c84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	08005119 	.word	0x08005119
 8004ebc:	ffff0000 	.word	0xffff0000

08004ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d006      	beq.n	8004eea <I2C_MasterRequestWrite+0x2a>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <I2C_MasterRequestWrite+0x2a>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ee8:	d108      	bne.n	8004efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e00b      	b.n	8004f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	2b12      	cmp	r3, #18
 8004f02:	d107      	bne.n	8004f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f968 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e035      	b.n	8004f9c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f38:	d108      	bne.n	8004f4c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f48:	611a      	str	r2, [r3, #16]
 8004f4a:	e01b      	b.n	8004f84 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f4c:	897b      	ldrh	r3, [r7, #10]
 8004f4e:	11db      	asrs	r3, r3, #7
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 0306 	and.w	r3, r3, #6
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f063 030f 	orn	r3, r3, #15
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <I2C_MasterRequestWrite+0xe4>)
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f99a 	bl	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e010      	b.n	8004f9c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f7a:	897b      	ldrh	r3, [r7, #10]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4907      	ldr	r1, [pc, #28]	; (8004fa8 <I2C_MasterRequestWrite+0xe8>)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f98a 	bl	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	00010008 	.word	0x00010008
 8004fa8:	00010002 	.word	0x00010002

08004fac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d006      	beq.n	8004fe6 <I2C_MasterRequestRead+0x3a>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d003      	beq.n	8004fe6 <I2C_MasterRequestRead+0x3a>
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fe4:	d108      	bne.n	8004ff8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e00b      	b.n	8005010 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	2b11      	cmp	r3, #17
 8004ffe:	d107      	bne.n	8005010 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800500e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f8ea 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e06d      	b.n	8005108 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005034:	d108      	bne.n	8005048 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]
 8005046:	e053      	b.n	80050f0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005048:	897b      	ldrh	r3, [r7, #10]
 800504a:	11db      	asrs	r3, r3, #7
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 0306 	and.w	r3, r3, #6
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f063 030f 	orn	r3, r3, #15
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	492a      	ldr	r1, [pc, #168]	; (8005110 <I2C_MasterRequestRead+0x164>)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f91c 	bl	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e048      	b.n	8005108 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4923      	ldr	r1, [pc, #140]	; (8005114 <I2C_MasterRequestRead+0x168>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f90c 	bl	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e038      	b.n	8005108 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f894 	bl	80051f6 <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e017      	b.n	8005108 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	11db      	asrs	r3, r3, #7
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 0306 	and.w	r3, r3, #6
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f063 030e 	orn	r3, r3, #14
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4907      	ldr	r1, [pc, #28]	; (8005114 <I2C_MasterRequestRead+0x168>)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f8d4 	bl	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	00010008 	.word	0x00010008
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	2200      	movs	r2, #0
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	2200      	movs	r2, #0
 800513c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	2200      	movs	r2, #0
 8005162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d10e      	bne.n	800519e <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7fe fd98 	bl	8003ccc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800519c:	e027      	b.n	80051ee <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a4:	2b28      	cmp	r3, #40	; 0x28
 80051a6:	d117      	bne.n	80051d8 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2228      	movs	r2, #40	; 0x28
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051d6:	e007      	b.n	80051e8 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7fe fd66 	bl	8003cba <HAL_I2C_ErrorCallback>
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005206:	e025      	b.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d021      	beq.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005210:	f7fd fb64 	bl	80028dc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d116      	bne.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e023      	b.n	800529c <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10d      	bne.n	800527a <I2C_WaitOnFlagUntilTimeout+0x84>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	43da      	mvns	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	e00c      	b.n	8005294 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	43da      	mvns	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4013      	ands	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	429a      	cmp	r2, r3
 8005298:	d0b6      	beq.n	8005208 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b2:	e051      	b.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c2:	d123      	bne.n	800530c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e046      	b.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d021      	beq.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fd fae2 	bl	80028dc <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d116      	bne.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e020      	b.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10c      	bne.n	800537c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	43da      	mvns	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e00b      	b.n	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	43da      	mvns	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d18d      	bne.n	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ae:	e02d      	b.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f8ce 	bl	8005552 <I2C_IsAcknowledgeFailed>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e02d      	b.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d021      	beq.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7fd fa88 	bl	80028dc <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d116      	bne.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e007      	b.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d1ca      	bne.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005430:	e02d      	b.n	800548e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f88d 	bl	8005552 <I2C_IsAcknowledgeFailed>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e02d      	b.n	800549e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d021      	beq.n	800548e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fd fa47 	bl	80028dc <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d116      	bne.n	800548e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e007      	b.n	800549e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d1ca      	bne.n	8005432 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b2:	e042      	b.n	800553a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d119      	bne.n	80054f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f06f 0210 	mvn.w	r2, #16
 80054ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e029      	b.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f6:	f7fd f9f1 	bl	80028dc <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d116      	bne.n	800553a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e007      	b.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d1b5      	bne.n	80054b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005568:	d11b      	bne.n	80055a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005572:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80055be:	d103      	bne.n	80055c8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80055c6:	e007      	b.n	80055d8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80055d0:	d102      	bne.n	80055d8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2208      	movs	r2, #8
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e26c      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8087 	beq.w	8005712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005604:	4b92      	ldr	r3, [pc, #584]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	2b04      	cmp	r3, #4
 800560e:	d00c      	beq.n	800562a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005610:	4b8f      	ldr	r3, [pc, #572]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b08      	cmp	r3, #8
 800561a:	d112      	bne.n	8005642 <HAL_RCC_OscConfig+0x5e>
 800561c:	4b8c      	ldr	r3, [pc, #560]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005628:	d10b      	bne.n	8005642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562a:	4b89      	ldr	r3, [pc, #548]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d06c      	beq.n	8005710 <HAL_RCC_OscConfig+0x12c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d168      	bne.n	8005710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e246      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0x76>
 800564c:	4b80      	ldr	r3, [pc, #512]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a7f      	ldr	r2, [pc, #508]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	e02e      	b.n	80056b8 <HAL_RCC_OscConfig+0xd4>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x98>
 8005662:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a7a      	ldr	r2, [pc, #488]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b78      	ldr	r3, [pc, #480]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a77      	ldr	r2, [pc, #476]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e01d      	b.n	80056b8 <HAL_RCC_OscConfig+0xd4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0xbc>
 8005686:	4b72      	ldr	r3, [pc, #456]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a71      	ldr	r2, [pc, #452]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800568c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b6f      	ldr	r3, [pc, #444]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6e      	ldr	r2, [pc, #440]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0xd4>
 80056a0:	4b6b      	ldr	r3, [pc, #428]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a6a      	ldr	r2, [pc, #424]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b68      	ldr	r3, [pc, #416]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a67      	ldr	r2, [pc, #412]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7fd f90c 	bl	80028dc <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fd f908 	bl	80028dc <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e1fa      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	4b5d      	ldr	r3, [pc, #372]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0xe4>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fd f8f8 	bl	80028dc <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fd f8f4 	bl	80028dc <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e1e6      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005702:	4b53      	ldr	r3, [pc, #332]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x10c>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d063      	beq.n	80057e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800571e:	4b4c      	ldr	r3, [pc, #304]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800572a:	4b49      	ldr	r3, [pc, #292]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b08      	cmp	r3, #8
 8005734:	d11c      	bne.n	8005770 <HAL_RCC_OscConfig+0x18c>
 8005736:	4b46      	ldr	r3, [pc, #280]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d116      	bne.n	8005770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005742:	4b43      	ldr	r3, [pc, #268]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_RCC_OscConfig+0x176>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e1ba      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575a:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4939      	ldr	r1, [pc, #228]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576e:	e03a      	b.n	80057e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005778:	4b36      	ldr	r3, [pc, #216]	; (8005854 <HAL_RCC_OscConfig+0x270>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577e:	f7fd f8ad 	bl	80028dc <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005786:	f7fd f8a9 	bl	80028dc <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e19b      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005798:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a4:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4927      	ldr	r1, [pc, #156]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]
 80057b8:	e015      	b.n	80057e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_RCC_OscConfig+0x270>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fd f88c 	bl	80028dc <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c8:	f7fd f888 	bl	80028dc <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e17a      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057da:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03a      	beq.n	8005868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d019      	beq.n	800582e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_RCC_OscConfig+0x274>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005800:	f7fd f86c 	bl	80028dc <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005808:	f7fd f868 	bl	80028dc <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e15a      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <HAL_RCC_OscConfig+0x26c>)
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005826:	2001      	movs	r0, #1
 8005828:	f000 fac6 	bl	8005db8 <RCC_Delay>
 800582c:	e01c      	b.n	8005868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_RCC_OscConfig+0x274>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005834:	f7fd f852 	bl	80028dc <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583a:	e00f      	b.n	800585c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800583c:	f7fd f84e 	bl	80028dc <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d908      	bls.n	800585c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e140      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	42420000 	.word	0x42420000
 8005858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800585c:	4b9e      	ldr	r3, [pc, #632]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e9      	bne.n	800583c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80a6 	beq.w	80059c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800587a:	4b97      	ldr	r3, [pc, #604]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10d      	bne.n	80058a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005886:	4b94      	ldr	r3, [pc, #592]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	4a93      	ldr	r2, [pc, #588]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800588c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005890:	61d3      	str	r3, [r2, #28]
 8005892:	4b91      	ldr	r3, [pc, #580]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a2:	4b8e      	ldr	r3, [pc, #568]	; (8005adc <HAL_RCC_OscConfig+0x4f8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d118      	bne.n	80058e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ae:	4b8b      	ldr	r3, [pc, #556]	; (8005adc <HAL_RCC_OscConfig+0x4f8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a8a      	ldr	r2, [pc, #552]	; (8005adc <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ba:	f7fd f80f 	bl	80028dc <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c2:	f7fd f80b 	bl	80028dc <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b64      	cmp	r3, #100	; 0x64
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e0fd      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d4:	4b81      	ldr	r3, [pc, #516]	; (8005adc <HAL_RCC_OscConfig+0x4f8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <HAL_RCC_OscConfig+0x312>
 80058e8:	4b7b      	ldr	r3, [pc, #492]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	6213      	str	r3, [r2, #32]
 80058f4:	e02d      	b.n	8005952 <HAL_RCC_OscConfig+0x36e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10c      	bne.n	8005918 <HAL_RCC_OscConfig+0x334>
 80058fe:	4b76      	ldr	r3, [pc, #472]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	4a75      	ldr	r2, [pc, #468]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	6213      	str	r3, [r2, #32]
 800590a:	4b73      	ldr	r3, [pc, #460]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	4a72      	ldr	r2, [pc, #456]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005910:	f023 0304 	bic.w	r3, r3, #4
 8005914:	6213      	str	r3, [r2, #32]
 8005916:	e01c      	b.n	8005952 <HAL_RCC_OscConfig+0x36e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b05      	cmp	r3, #5
 800591e:	d10c      	bne.n	800593a <HAL_RCC_OscConfig+0x356>
 8005920:	4b6d      	ldr	r3, [pc, #436]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	4a6c      	ldr	r2, [pc, #432]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005926:	f043 0304 	orr.w	r3, r3, #4
 800592a:	6213      	str	r3, [r2, #32]
 800592c:	4b6a      	ldr	r3, [pc, #424]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	4a69      	ldr	r2, [pc, #420]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6213      	str	r3, [r2, #32]
 8005938:	e00b      	b.n	8005952 <HAL_RCC_OscConfig+0x36e>
 800593a:	4b67      	ldr	r3, [pc, #412]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	4a66      	ldr	r2, [pc, #408]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	6213      	str	r3, [r2, #32]
 8005946:	4b64      	ldr	r3, [pc, #400]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4a63      	ldr	r2, [pc, #396]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800594c:	f023 0304 	bic.w	r3, r3, #4
 8005950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d015      	beq.n	8005986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595a:	f7fc ffbf 	bl	80028dc <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005960:	e00a      	b.n	8005978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005962:	f7fc ffbb 	bl	80028dc <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e0ab      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005978:	4b57      	ldr	r3, [pc, #348]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0ee      	beq.n	8005962 <HAL_RCC_OscConfig+0x37e>
 8005984:	e014      	b.n	80059b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005986:	f7fc ffa9 	bl	80028dc <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598c:	e00a      	b.n	80059a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598e:	f7fc ffa5 	bl	80028dc <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	f241 3288 	movw	r2, #5000	; 0x1388
 800599c:	4293      	cmp	r3, r2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e095      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a4:	4b4c      	ldr	r3, [pc, #304]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ee      	bne.n	800598e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d105      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b6:	4b48      	ldr	r3, [pc, #288]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	4a47      	ldr	r2, [pc, #284]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 80059bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8081 	beq.w	8005ace <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059cc:	4b42      	ldr	r3, [pc, #264]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 030c 	and.w	r3, r3, #12
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d061      	beq.n	8005a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d146      	bne.n	8005a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <HAL_RCC_OscConfig+0x4fc>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e6:	f7fc ff79 	bl	80028dc <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ee:	f7fc ff75 	bl	80028dc <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e067      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f0      	bne.n	80059ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d108      	bne.n	8005a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a16:	4b30      	ldr	r3, [pc, #192]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	492d      	ldr	r1, [pc, #180]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a28:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a19      	ldr	r1, [r3, #32]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	4927      	ldr	r1, [pc, #156]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a40:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <HAL_RCC_OscConfig+0x4fc>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a46:	f7fc ff49 	bl	80028dc <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fc ff45 	bl	80028dc <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e037      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a60:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x46a>
 8005a6c:	e02f      	b.n	8005ace <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <HAL_RCC_OscConfig+0x4fc>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a74:	f7fc ff32 	bl	80028dc <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fc ff2e 	bl	80028dc <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e020      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x498>
 8005a9a:	e018      	b.n	8005ace <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e013      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_OscConfig+0x4f4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d106      	bne.n	8005aca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d001      	beq.n	8005ace <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40007000 	.word	0x40007000
 8005ae0:	42420060 	.word	0x42420060

08005ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0d0      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af8:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d910      	bls.n	8005b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b67      	ldr	r3, [pc, #412]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 0207 	bic.w	r2, r3, #7
 8005b0e:	4965      	ldr	r1, [pc, #404]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	4b63      	ldr	r3, [pc, #396]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0b8      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d020      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b40:	4b59      	ldr	r3, [pc, #356]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a58      	ldr	r2, [pc, #352]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b58:	4b53      	ldr	r3, [pc, #332]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4a52      	ldr	r2, [pc, #328]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b64:	4b50      	ldr	r3, [pc, #320]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	494d      	ldr	r1, [pc, #308]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d040      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d107      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8a:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d115      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e07f      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e073      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb2:	4b3d      	ldr	r3, [pc, #244]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e06b      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bc2:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f023 0203 	bic.w	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4936      	ldr	r1, [pc, #216]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd4:	f7fc fe82 	bl	80028dc <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bdc:	f7fc fe7e 	bl	80028dc <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e053      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 020c 	and.w	r2, r3, #12
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1eb      	bne.n	8005bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d210      	bcs.n	8005c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 0207 	bic.w	r2, r3, #7
 8005c1a:	4922      	ldr	r1, [pc, #136]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e032      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4916      	ldr	r1, [pc, #88]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	490e      	ldr	r1, [pc, #56]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c72:	f000 f821 	bl	8005cb8 <HAL_RCC_GetSysClockFreq>
 8005c76:	4601      	mov	r1, r0
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <HAL_RCC_ClockConfig+0x1c8>)
 8005c84:	5cd3      	ldrb	r3, [r2, r3]
 8005c86:	fa21 f303 	lsr.w	r3, r1, r3
 8005c8a:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8005c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fc fde0 	bl	8002858 <HAL_InitTick>

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	0800730c 	.word	0x0800730c
 8005cb0:	2000000c 	.word	0x2000000c
 8005cb4:	20000010 	.word	0x20000010

08005cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb8:	b490      	push	{r4, r7}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005cc0:	1d3c      	adds	r4, r7, #4
 8005cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d002      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x46>
 8005cf6:	e02d      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cfa:	623b      	str	r3, [r7, #32]
      break;
 8005cfc:	e02d      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	0c9b      	lsrs	r3, r3, #18
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d1c:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c5b      	lsrs	r3, r3, #17
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d36:	fb02 f203 	mul.w	r2, r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
 8005d42:	e004      	b.n	8005d4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d48:	fb02 f303 	mul.w	r3, r2, r3
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	623b      	str	r3, [r7, #32]
      break;
 8005d52:	e002      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d56:	623b      	str	r3, [r7, #32]
      break;
 8005d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3728      	adds	r7, #40	; 0x28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc90      	pop	{r4, r7}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	0800714c 	.word	0x0800714c
 8005d6c:	0800715c 	.word	0x0800715c
 8005d70:	40021000 	.word	0x40021000
 8005d74:	007a1200 	.word	0x007a1200
 8005d78:	003d0900 	.word	0x003d0900

08005d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d82:	681b      	ldr	r3, [r3, #0]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d94:	f7ff fff2 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4a03      	ldr	r2, [pc, #12]	; (8005db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da6:	5cd3      	ldrb	r3, [r2, r3]
 8005da8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800731c 	.word	0x0800731c

08005db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <RCC_Delay+0x34>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <RCC_Delay+0x38>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0a5b      	lsrs	r3, r3, #9
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005dd4:	bf00      	nop
  }
  while (Delay --);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f9      	bne.n	8005dd4 <RCC_Delay+0x1c>
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c
 8005df0:	10624dd3 	.word	0x10624dd3

08005df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e053      	b.n	8005eae <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7fc fba9 	bl	8002578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	ea42 0103 	orr.w	r1, r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	0c1a      	lsrs	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f002 0204 	and.w	r2, r2, #4
 8005e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b088      	sub	sp, #32
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_SPI_Transmit+0x22>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e11e      	b.n	8006116 <HAL_SPI_Transmit+0x260>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee0:	f7fc fcfc 	bl	80028dc <HAL_GetTick>
 8005ee4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d002      	beq.n	8005efc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005efa:	e103      	b.n	8006104 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_SPI_Transmit+0x52>
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f0c:	e0fa      	b.n	8006104 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2203      	movs	r2, #3
 8005f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	88fa      	ldrh	r2, [r7, #6]
 8005f26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	88fa      	ldrh	r2, [r7, #6]
 8005f2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	d107      	bne.n	8005f66 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d007      	beq.n	8005f84 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8c:	d14b      	bne.n	8006026 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Transmit+0xe6>
 8005f96:	8afb      	ldrh	r3, [r7, #22]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d13e      	bne.n	800601a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fc0:	e02b      	b.n	800601a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d112      	bne.n	8005ff6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	881a      	ldrh	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ff4:	e011      	b.n	800601a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff6:	f7fc fc71 	bl	80028dc <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d803      	bhi.n	800600e <HAL_SPI_Transmit+0x158>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d102      	bne.n	8006014 <HAL_SPI_Transmit+0x15e>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006018:	e074      	b.n	8006104 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1ce      	bne.n	8005fc2 <HAL_SPI_Transmit+0x10c>
 8006024:	e04c      	b.n	80060c0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Transmit+0x17e>
 800602e:	8afb      	ldrh	r3, [r7, #22]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d140      	bne.n	80060b6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800605a:	e02c      	b.n	80060b6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b02      	cmp	r3, #2
 8006068:	d113      	bne.n	8006092 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	7812      	ldrb	r2, [r2, #0]
 8006076:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006090:	e011      	b.n	80060b6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006092:	f7fc fc23 	bl	80028dc <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d803      	bhi.n	80060aa <HAL_SPI_Transmit+0x1f4>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d102      	bne.n	80060b0 <HAL_SPI_Transmit+0x1fa>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060b4:	e026      	b.n	8006104 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1cd      	bne.n	800605c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f894 	bl	80061f2 <SPI_EndRxTxTransaction>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e000      	b.n	8006104 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006102:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006114:	7ffb      	ldrb	r3, [r7, #31]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	4613      	mov	r3, r2
 800612c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612e:	e04c      	b.n	80061ca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d048      	beq.n	80061ca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006138:	f7fc fbd0 	bl	80028dc <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d902      	bls.n	800614e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d13d      	bne.n	80061ca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800615c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006166:	d111      	bne.n	800618c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006170:	d004      	beq.n	800617c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617a:	d107      	bne.n	800618c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006194:	d10f      	bne.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d1a3      	bne.n	8006130 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af02      	add	r7, sp, #8
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2200      	movs	r2, #0
 8006206:	2180      	movs	r1, #128	; 0x80
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff ff88 	bl	800611e <SPI_WaitFlagStateUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	f043 0220 	orr.w	r2, r3, #32
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e000      	b.n	8006226 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e01d      	b.n	800627c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fc f9db 	bl	8002610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 fb3d 	bl	80068ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d007      	beq.n	80062be <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e01d      	b.n	8006318 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f815 	bl	8006320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f000 faef 	bl	80068ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
	...

08006334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2201      	movs	r2, #1
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fd50 	bl	8006dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a10      	ldr	r2, [pc, #64]	; (8006394 <HAL_TIM_PWM_Start+0x60>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d107      	bne.n	8006366 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b06      	cmp	r3, #6
 8006376:	d007      	beq.n	8006388 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00

08006398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0202 	mvn.w	r2, #2
 80063c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa6a 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa5d 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa6c 	bl	80068c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0204 	mvn.w	r2, #4
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa40 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa33 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa42 	bl	80068c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa16 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa09 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa18 	bl	80068c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2208      	movs	r2, #8
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9ec 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9df 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9ee 	bl	80068c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fa fb96 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd14 	bl	8006f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d10e      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d107      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9b2 	bl	80068d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b20      	cmp	r3, #32
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0220 	mvn.w	r2, #32
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fcdf 	bl	8006f5e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065be:	2302      	movs	r3, #2
 80065c0:	e0b4      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x184>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b0c      	cmp	r3, #12
 80065d6:	f200 809f 	bhi.w	8006718 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006615 	.word	0x08006615
 80065e4:	08006719 	.word	0x08006719
 80065e8:	08006719 	.word	0x08006719
 80065ec:	08006719 	.word	0x08006719
 80065f0:	08006655 	.word	0x08006655
 80065f4:	08006719 	.word	0x08006719
 80065f8:	08006719 	.word	0x08006719
 80065fc:	08006719 	.word	0x08006719
 8006600:	08006697 	.word	0x08006697
 8006604:	08006719 	.word	0x08006719
 8006608:	08006719 	.word	0x08006719
 800660c:	08006719 	.word	0x08006719
 8006610:	080066d7 	.word	0x080066d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f9c8 	bl	80069b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0208 	orr.w	r2, r2, #8
 800662e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0204 	bic.w	r2, r2, #4
 800663e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6999      	ldr	r1, [r3, #24]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	619a      	str	r2, [r3, #24]
      break;
 8006652:	e062      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fa0e 	bl	8006a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6999      	ldr	r1, [r3, #24]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	021a      	lsls	r2, r3, #8
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	619a      	str	r2, [r3, #24]
      break;
 8006694:	e041      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fa57 	bl	8006b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0208 	orr.w	r2, r2, #8
 80066b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0204 	bic.w	r2, r2, #4
 80066c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69d9      	ldr	r1, [r3, #28]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	61da      	str	r2, [r3, #28]
      break;
 80066d4:	e021      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 faa1 	bl	8006c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69d9      	ldr	r1, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	021a      	lsls	r2, r3, #8
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	61da      	str	r2, [r3, #28]
      break;
 8006716:	e000      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006718:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIM_ConfigClockSource+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e0a6      	b.n	800689a <HAL_TIM_ConfigClockSource+0x166>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800676a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d067      	beq.n	8006854 <HAL_TIM_ConfigClockSource+0x120>
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d80b      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x6c>
 8006788:	2b10      	cmp	r3, #16
 800678a:	d073      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0x140>
 800678c:	2b10      	cmp	r3, #16
 800678e:	d802      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x62>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d06f      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006794:	e078      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006796:	2b20      	cmp	r3, #32
 8006798:	d06c      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0x140>
 800679a:	2b30      	cmp	r3, #48	; 0x30
 800679c:	d06a      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800679e:	e073      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067a0:	2b70      	cmp	r3, #112	; 0x70
 80067a2:	d00d      	beq.n	80067c0 <HAL_TIM_ConfigClockSource+0x8c>
 80067a4:	2b70      	cmp	r3, #112	; 0x70
 80067a6:	d804      	bhi.n	80067b2 <HAL_TIM_ConfigClockSource+0x7e>
 80067a8:	2b50      	cmp	r3, #80	; 0x50
 80067aa:	d033      	beq.n	8006814 <HAL_TIM_ConfigClockSource+0xe0>
 80067ac:	2b60      	cmp	r3, #96	; 0x60
 80067ae:	d041      	beq.n	8006834 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067b0:	e06a      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b6:	d066      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x152>
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	d017      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80067be:	e063      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6899      	ldr	r1, [r3, #8]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f000 faed 	bl	8006dae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]
      break;
 80067ec:	e04c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6899      	ldr	r1, [r3, #8]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f000 fad6 	bl	8006dae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006810:	609a      	str	r2, [r3, #8]
      break;
 8006812:	e039      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	461a      	mov	r2, r3
 8006822:	f000 fa4d 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2150      	movs	r1, #80	; 0x50
 800682c:	4618      	mov	r0, r3
 800682e:	f000 faa4 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006832:	e029      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6859      	ldr	r1, [r3, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	461a      	mov	r2, r3
 8006842:	f000 fa6b 	bl	8006d1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2160      	movs	r1, #96	; 0x60
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fa94 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006852:	e019      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	6859      	ldr	r1, [r3, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	461a      	mov	r2, r3
 8006862:	f000 fa2d 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2140      	movs	r1, #64	; 0x40
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fa84 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006872:	e009      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f000 fa7b 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006884:	e000      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr

080068c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
	...

080068ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a29      	ldr	r2, [pc, #164]	; (80069a4 <TIM_Base_SetConfig+0xb8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00b      	beq.n	800691c <TIM_Base_SetConfig+0x30>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d007      	beq.n	800691c <TIM_Base_SetConfig+0x30>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a26      	ldr	r2, [pc, #152]	; (80069a8 <TIM_Base_SetConfig+0xbc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_Base_SetConfig+0x30>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a25      	ldr	r2, [pc, #148]	; (80069ac <TIM_Base_SetConfig+0xc0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d108      	bne.n	800692e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <TIM_Base_SetConfig+0xb8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_Base_SetConfig+0x62>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d007      	beq.n	800694e <TIM_Base_SetConfig+0x62>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <TIM_Base_SetConfig+0xbc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_Base_SetConfig+0x62>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a18      	ldr	r2, [pc, #96]	; (80069ac <TIM_Base_SetConfig+0xc0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a07      	ldr	r2, [pc, #28]	; (80069a4 <TIM_Base_SetConfig+0xb8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d103      	bne.n	8006994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	615a      	str	r2, [r3, #20]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	40012c00 	.word	0x40012c00
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800

080069b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f023 0201 	bic.w	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 0302 	bic.w	r3, r3, #2
 80069f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <TIM_OC1_SetConfig+0xc8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d10c      	bne.n	8006a26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0308 	bic.w	r3, r3, #8
 8006a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <TIM_OC1_SetConfig+0xc8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d111      	bne.n	8006a52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	621a      	str	r2, [r3, #32]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40012c00 	.word	0x40012c00

08006a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0210 	bic.w	r2, r3, #16
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 0320 	bic.w	r3, r3, #32
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <TIM_OC2_SetConfig+0xd0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d10d      	bne.n	8006af8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <TIM_OC2_SetConfig+0xd0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d113      	bne.n	8006b28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	40012c00 	.word	0x40012c00

08006b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0303 	bic.w	r3, r3, #3
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <TIM_OC3_SetConfig+0xd0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10d      	bne.n	8006bca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a14      	ldr	r2, [pc, #80]	; (8006c20 <TIM_OC3_SetConfig+0xd0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d113      	bne.n	8006bfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	621a      	str	r2, [r3, #32]
}
 8006c14:	bf00      	nop
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40012c00 	.word	0x40012c00

08006c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <TIM_OC4_SetConfig+0x98>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d109      	bne.n	8006c98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	019b      	lsls	r3, r3, #6
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00

08006cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0201 	bic.w	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 030a 	bic.w	r3, r3, #10
 8006cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f023 0210 	bic.w	r2, r3, #16
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	031b      	lsls	r3, r3, #12
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	621a      	str	r2, [r3, #32]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f043 0307 	orr.w	r3, r3, #7
 8006d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b087      	sub	sp, #28
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
 8006dba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	021a      	lsls	r2, r3, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	609a      	str	r2, [r3, #8]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2201      	movs	r2, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	401a      	ands	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1a      	ldr	r2, [r3, #32]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	431a      	orrs	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e032      	b.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e84:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e03d      	b.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
	...

08006f84 <__libc_init_array>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	2500      	movs	r5, #0
 8006f88:	4e0c      	ldr	r6, [pc, #48]	; (8006fbc <__libc_init_array+0x38>)
 8006f8a:	4c0d      	ldr	r4, [pc, #52]	; (8006fc0 <__libc_init_array+0x3c>)
 8006f8c:	1ba4      	subs	r4, r4, r6
 8006f8e:	10a4      	asrs	r4, r4, #2
 8006f90:	42a5      	cmp	r5, r4
 8006f92:	d109      	bne.n	8006fa8 <__libc_init_array+0x24>
 8006f94:	f000 f82e 	bl	8006ff4 <_init>
 8006f98:	2500      	movs	r5, #0
 8006f9a:	4e0a      	ldr	r6, [pc, #40]	; (8006fc4 <__libc_init_array+0x40>)
 8006f9c:	4c0a      	ldr	r4, [pc, #40]	; (8006fc8 <__libc_init_array+0x44>)
 8006f9e:	1ba4      	subs	r4, r4, r6
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	42a5      	cmp	r5, r4
 8006fa4:	d105      	bne.n	8006fb2 <__libc_init_array+0x2e>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fac:	4798      	blx	r3
 8006fae:	3501      	adds	r5, #1
 8006fb0:	e7ee      	b.n	8006f90 <__libc_init_array+0xc>
 8006fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fb6:	4798      	blx	r3
 8006fb8:	3501      	adds	r5, #1
 8006fba:	e7f2      	b.n	8006fa2 <__libc_init_array+0x1e>
 8006fbc:	08007324 	.word	0x08007324
 8006fc0:	08007324 	.word	0x08007324
 8006fc4:	08007324 	.word	0x08007324
 8006fc8:	08007328 	.word	0x08007328

08006fcc <memcpy>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	1e43      	subs	r3, r0, #1
 8006fd0:	440a      	add	r2, r1
 8006fd2:	4291      	cmp	r1, r2
 8006fd4:	d100      	bne.n	8006fd8 <memcpy+0xc>
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe0:	e7f7      	b.n	8006fd2 <memcpy+0x6>

08006fe2 <memset>:
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d100      	bne.n	8006fec <memset+0xa>
 8006fea:	4770      	bx	lr
 8006fec:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff0:	e7f9      	b.n	8006fe6 <memset+0x4>
	...

08006ff4 <_init>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	bf00      	nop
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr

08007000 <_fini>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr
